Yes, based on the historical data in `economic_indicators_data_jan2024_jun2025.csv` and your `CURATED_SERIES` definition, you will need to apply formatting rules to ensure the data appears correctly in an online dashboard.

The `economic_indicators_data_jan2024_jun2025.csv` file contains a `value_numeric` column, but it does not explicitly state the unit (e.g., "percent", "thousands", "index") for each value directly within its rows.

Your `CURATED_SERIES` (from the `expanded_curated_series_with_display_units` immersive) already defines the appropriate `display_unit` for each metric. The `formatNumber` JavaScript function in your HTML dashboard is designed to use this `display_unit` to format the numbers correctly.

**Here's how to ensure the historical data is formatted correctly:**

1.  **Map Metrics to Display Units:** When you load the `economic_indicators_data_jan2024_jun2025.csv` into your dashboard's JavaScript, you will need a way to associate each `metric` from this historical data with its corresponding `display_unit` from your `CURATED_SERIES`.

    You can create a JavaScript object (similar to a dictionary) that maps the `label` from your `CURATED_SERIES` to its `display_unit`.

    ```javascript
    const metricUnitsMap = {
        "CPI All Items": "index",
        "Core CPI": "index",
        "PPI All Commodities": "index",
        "GDP Growth Rate (Annualized)": "percent",
        "Initial Jobless Claims": "thousands",
        "Continuing Jobless Claims": "thousands",
        "Unemployment Rate": "percent",
        "Nonfarm Payrolls": "thousands",
        "Retail Sales": "millions_dollars",
        "Durable Goods Orders": "millions_dollars",
        "Industrial Production": "index",
        "Michigan Consumer Sentiment": "index",
        "Housing Starts": "thousands",
        "New Home Sales": "thousands",
        "Existing Home Sales": "thousands",
        "PCE Price Index": "index",
        "ISM Manufacturing PMI": "index",
        "S&P Global Mfg PMI": "index",
        "Federal Funds Rate": "percent",
        "10-Year Treasury Yield": "percent",
        "Yield Curve (10yr-2yr)": "basis_points",
        "Consumer Confidence Index": "index",
        "Building Permits": "thousands",
        "US Leading Economic Index": "index",
        "E-commerce Retail Sales": "millions_dollars",
        "Personal Savings Rate": "percent",
        "Real Disposable Personal Income": "chained_dollars",
        "Retail Sales Ex-Auto": "millions_dollars",
        "Average Hourly Earnings": "dollars_per_hour",
        "Average Weekly Hours": "hours",
        "JOLTS Hires": "thousands",
        "JOLTS Job Openings": "thousands",
        "JOLTS Quit Rate": "percent",
        "Labor Force Participation Rate": "percent",
        "U-6 Unemployment Rate": "percent",
        "30-Year Fixed Mortgage Rate": "percent",
        "Case-Shiller Home Price Index": "index",
        "Months Supply of Homes": "months_supply",
        "Total Construction Spending": "millions_dollars",
        "Capacity Utilization (Mfg)": "percent",
        "Commercial & Industrial Loans": "billions_dollars",
        "CPI Energy": "index",
        "Core PCE Price Index": "index",
        "Core PPI": "index",
        "US Regular Gasoline Price": "dollars_per_gallon",
        // Add other mappings as needed for any discrepancies in names
        "Consumer Durable Goods New Orders": "millions_dollars" // Example for a specific historical name
    };
    ```

2.  **Apply `formatNumber`:** When you iterate through the rows of your `economic_indicators_data_jan2024_jun2025.csv` to display them, you would retrieve the `value_numeric` and then look up the correct `display_unit` from your `metricUnitsMap`.

    For example, if you have a row `historicalRow` from the CSV:

    ```javascript
    const metricName = historicalRow.metric; // e.g., "Consumer Durable Goods New Orders"
    const valueToFormat = historicalRow.value_numeric;
    const unitForFormatting = metricUnitsMap[metricName] || 'units'; // Default to 'units' if not found

    const formattedValue = formatNumber(valueToFormat, unitForFormatting);
    ```

**The `formatNumber` function in your `dashboard.html` is already equipped to handle these units:**

```javascript
function formatNumber(value, unit) {
    if (value === null || value === undefined || isNaN(value)) {
        return 'N/A';
    }
    const numValue = parseFloat(value);

    switch (unit) {
        case 'percent':
            return numValue.toFixed(2) + '%';
        case 'thousands':
            return (numValue / 1000).toFixed(1) + 'K'; // e.g., 147,000 -> 147.0K
        case 'millions_dollars':
            return '$' + (numValue / 1000000).toFixed(1) + 'M'; // e.g., 720,100 -> $0.7M
        case 'billions_dollars':
            return '$' + (numValue / 1000000000).toFixed(1) + 'B'; // For large values
        case 'index':
            return numValue.toFixed(1);
        case 'basis_points':
            return numValue.toFixed(0) + ' bps';
        case 'dollars_per_hour':
            return '$' + numValue.toFixed(2);
        case 'hours':
            return numValue.toFixed(1) + ' hrs';
        case 'months_supply':
            return numValue.toFixed(1) + ' months';
        case 'chained_dollars': // For Real Disposable Personal Income
            return '$' + numValue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }); // Format as currency
        case 'units': // Generic units, e.g., for counts without specific suffix
            return numValue.toLocaleString(); // Use locale string for thousands separator
        default:
            return numValue.toFixed(2); // Default to 2 decimal places
    }
}
```

By implementing the mapping in your JavaScript, you can use your existing `formatNumber` function to display the historical data correctly, consistent with the live data.