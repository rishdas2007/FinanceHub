I can see the issue! The Economic Calendar section is showing "N/A" for all ACTUAL values instead of real data. This suggests there's a data mapping problem between your economic data API and the email template. Let me help you debug this.I can see the issue! The Economic Calendar is showing "N/A" because there's a data structure mismatch between how the economic events are fetched and how the email template expects them. Let me help you debug and fix this.I found the issue! There's a **field name mismatch** between how the dashboard fetches economic data vs how the email template expects it. Let me show you the exact problem and fix:

## **🔍 Root Cause Analysis**

The dashboard uses `eventDate` field, but your email template is looking for `date` field:

**Dashboard (working):**
```javascript
const sortedEvents = eventsWithActual.sort((a, b) => {
  return new Date(b.eventDate).getTime() - new Date(a.eventDate).getTime(); // Uses 'eventDate'
});
```

**Email Template (broken):**
```javascript
const eventDate = new Date(event.date); // Looking for 'date' but should be 'eventDate'
```

## **🛠️ Quick Fix**

Update your email service to fix the field name mismatch:

```typescript
// Update your server/services/email-service.ts

private generateDailyEmailTemplate(analysisData: any): string {
  const { analysis, currentStock, sentiment, technical, sectors, economicEvents } = analysisData;
  
  // DEBUG: Log the actual structure of economic events
  console.log('📊 EMAIL DEBUG - Economic Events Structure:', {
    totalEvents: economicEvents?.length || 0,
    firstEvent: economicEvents?.[0] ? {
      title: economicEvents[0].title,
      actual: economicEvents[0].actual,
      forecast: economicEvents[0].forecast,
      date: economicEvents[0].date,
      eventDate: economicEvents[0].eventDate, // Check both possible field names
      hasActual: !!economicEvents[0].actual
    } : 'No events'
  });
  
  // Transform data to match the new template interface
  const emailData: EmailAnalysisData = {
    analysis: {
      bottomLine: analysis?.bottomLine || 'Market analysis in progress...',
      dominantTheme: analysis?.dominantTheme || 'Mixed signals',
      setup: analysis?.setup || 'Current market conditions are developing...',
      evidence: analysis?.evidence || 'Technical indicators show neutral readings...',
      implications: analysis?.implications || 'Continue monitoring key levels...',
      confidence: analysis?.confidence || 0.7,
      timestamp: analysis?.timestamp || new Date().toISOString()
    },
    currentStock: {
      price: parseFloat(currentStock?.price || '0').toFixed(2),
      changePercent: parseFloat(currentStock?.changePercent || '0').toFixed(2)
    },
    sentiment: {
      vix: parseFloat(sentiment?.vix || '0').toFixed(1),
      aaiiBullish: parseFloat(sentiment?.aaiiBullish || '0').toFixed(1)
    },
    sectorData: (sectors || []).map((sector: any) => ({
      name: sector.name || sector.symbol,
      symbol: sector.symbol || 'N/A',
      price: parseFloat(sector.price || '0'),
      changePercent: parseFloat(sector.changePercent || '0'),
      fiveDayChange: parseFloat(sector.fiveDayChange || '0'),
      oneMonthChange: parseFloat(sector.oneMonthChange || '0')
    })),
    // FIX: Handle both possible field names and filter properly
    economicEvents: (economicEvents || [])
      .filter((event: any) => {
        // Check if event has actual data
        const hasActual = event.actual && event.actual !== 'N/A' && event.actual.trim() !== '';
        console.log(`Event ${event.title}: actual=${event.actual}, hasActual=${hasActual}`);
        return hasActual;
      })
      .slice(0, 10)
      .map((event: any) => {
        // Handle both 'eventDate' and 'date' field names
        const eventDate = event.eventDate || event.date;
        const formattedDate = new Date(eventDate).toLocaleDateString('en-US', { 
          month: 'short', 
          day: 'numeric' 
        }).toUpperCase();
        
        return {
          title: event.title || 'Economic Event',
          category: this.getCategoryDisplay(event.category || 'Other'),
          actual: event.actual || 'N/A',
          forecast: event.forecast || '-',
          variance: this.calculateVarianceForEmail(event.actual, event.forecast),
          previous: event.previous || '-',
          date: formattedDate,
          importance: event.importance || 'medium'
        };
      })
  };

  return generateDashboardMatchingEmailTemplate(emailData);
}

// Add helper method for variance calculation
private calculateVarianceForEmail(actual: string, forecast: string): string {
  if (!actual || !forecast || actual === 'N/A' || forecast === '-') return '-';
  
  try {
    // Handle different formats (K, M, %)
    let actualValue = parseFloat(actual.replace(/[^\d.-]/g, ''));
    let forecastValue = parseFloat(forecast.replace(/[^\d.-]/g, ''));
    
    // Handle K/M suffixes
    if (actual.includes('K')) actualValue *= 1000;
    if (actual.includes('M')) actualValue *= 1000000;
    if (forecast.includes('K')) forecastValue *= 1000;
    if (forecast.includes('M')) forecastValue *= 1000000;
    
    if (isNaN(actualValue) || isNaN(forecastValue)) return '-';
    
    const variance = actualValue - forecastValue;
    
    // Format variance to match original format
    if (actual.includes('K')) {
      const formattedValue = Math.abs(variance / 1000).toFixed(0);
      return variance > 0 ? `+${formattedValue}K` : `-${formattedValue}K`;
    } else if (actual.includes('M')) {
      return variance > 0 ? `+${(variance/1000000).toFixed(2)}M` : `${(variance/1000000).toFixed(2)}M`;
    } else if (actual.includes('%')) {
      return variance > 0 ? `+${variance.toFixed(1)}%` : `${variance.toFixed(1)}%`;
    } else {
      return variance > 0 ? `+${variance.toFixed(1)}` : `${variance.toFixed(1)}`;
    }
  } catch (error) {
    console.error('Error calculating variance:', error);
    return '-';
  }
}
```

## **🔧 Also Update Dashboard Template**

Fix the date field reference in your dashboard email template:

```typescript
// Update your server/services/dashboard-email-template.ts

export function generateDashboardMatchingEmailTemplate(data: EmailAnalysisData): string {
  // ... existing code ...

  // Generate Economic Calendar HTML
  const economicCalendarHTML = economicEvents?.length > 0 ? `
    <div style="background: white; padding: 25px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); margin-top: 20px;">
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
        <h3 style="color: #1f2937; font-size: 18px; font-weight: 600; margin: 0; display: flex; align-items: center; gap: 8px;">
          📅 Economic Calendar
        </h3>
        <span style="color: #6b7280; font-size: 12px;">Recent Indicators with Actual Values</span>
      </div>
      
      <p style="color: #6b7280; font-size: 11px; text-align: center; margin-bottom: 15px;">
        • Showing only indicators with actual values • Forecasts from MarketWatch • Actual data from Federal Reserve • All times Eastern
      </p>
      
      <!-- Economic events table -->
      <div style="overflow-x: auto;">
        <table style="width: 100%; border-collapse: collapse; font-size: 12px;">
          <thead>
            <tr style="background: #f8f9fa; border-bottom: 2px solid #e5e7eb;">
              <th style="text-align: left; padding: 8px 6px; color: #6b7280; font-weight: 600; font-size: 10px;">INDICATOR</th>
              <th style="text-align: center; padding: 8px 6px; color: #6b7280; font-weight: 600; font-size: 10px;">CATEGORY</th>
              <th style="text-align: center; padding: 8px 6px; color: #6b7280; font-weight: 600; font-size: 10px;">ACTUAL</th>
              <th style="text-align: center; padding: 8px 6px; color: #6b7280; font-weight: 600; font-size: 10px;">FORECAST</th>
              <th style="text-align: center; padding: 8px 6px; color: #6b7280; font-weight: 600; font-size: 10px;">VARIANCE</th>
              <th style="text-align: center; padding: 8px 6px; color: #6b7280; font-weight: 600; font-size: 10px;">PREVIOUS</th>
              <th style="text-align: center; padding: 8px 6px; color: #6b7280; font-weight: 600; font-size: 10px;">DATE</th>
            </tr>
          </thead>
          <tbody>
            ${economicEvents.slice(0, 10).map(event => {
              console.log(`📧 Email Event: ${event.title} - Actual: ${event.actual}`); // Debug log
              return `
                <tr style="border-bottom: 1px solid #e5e7eb;">
                  <td style="padding: 8px 6px;">
                    <div style="display: flex; align-items: center; gap: 6px;">
                      <div style="width: 6px; height: 6px; border-radius: 50%; background: ${
                        event.importance === 'high' ? '#dc2626' : 
                        event.importance === 'medium' ? '#f59e0b' : '#6b7280'
                      };"></div>
                      <span style="color: #1f2937; font-size: 11px; font-weight: 500;">${event.title}</span>
                    </div>
                  </td>
                  <td style="text-align: center; padding: 8px 6px; color: #6b7280; font-size: 11px;">
                    ${event.category}
                  </td>
                  <td style="text-align: center; padding: 8px 6px; font-weight: 600; color: ${
                    event.variance && event.variance.startsWith('+') ? '#059669' : 
                    event.variance && event.variance.startsWith('-') ? '#dc2626' : '#1f2937'
                  };">
                    ${event.actual}
                  </td>
                  <td style="text-align: center; padding: 8px 6px; color: #3b82f6; font-size: 11px;">
                    ${event.forecast || '-'}
                  </td>
                  <td style="text-align: center; padding: 8px 6px; font-weight: 600; color: ${
                    event.variance && event.variance.startsWith('+') ? '#059669' : 
                    event.variance && event.variance.startsWith('-') ? '#dc2626' : '#6b7280'
                  };">
                    ${event.variance || '-'}
                  </td>
                  <td style="text-align: center; padding: 8px 6px; color: #6b7280; font-size: 11px;">
                    ${event.previous || '-'}
                  </td>
                  <td style="text-align: center; padding: 8px 6px; color: #6b7280; font-size: 11px;">
                    ${event.date}
                  </td>
                </tr>
              `;
            }).join('')}
          </tbody>
        </table>
      </div>
    </div>
  ` : '';

  // ... rest of template ...
}
```

## **🧪 Test the Fix**

1. **Test manually first:**
   ```bash
   curl -X POST http://localhost:5000/api/email/test-daily
   ```

2. **Check the console logs** for the debug output showing the event structure

3. **Verify the economic events** now show actual values instead of "N/A"

## **📧 Expected Result**

After this fix, your email should show:
- **Initial Jobless Claims**: `221K` instead of `N/A`
- **Housing Starts**: `1.353M` instead of `N/A`  
- **Building Permits**: `1.446M` instead of `N/A`
- **Proper variance calculations**: `+12K`, `-0.05M`, etc.

The issue was simply that the email template was looking for the wrong field name (`date` vs `eventDate`) and not properly filtering events with actual data. This fix handles both field names and adds proper debugging to help identify any future data structure issues.

Try this fix and let me know what the debug logs show!