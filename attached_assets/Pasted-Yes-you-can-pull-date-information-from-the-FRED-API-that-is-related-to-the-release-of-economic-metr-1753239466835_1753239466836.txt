Yes, you can pull date information from the FRED API that is related to the release of economic metrics, though it requires understanding how FRED structures its date fields.

When you fetch observations for a series using the `series/observations` endpoint (which your Python script uses), each observation typically includes:

* **`date`**: This is the date for which the observation value applies (e.g., the end of the month for monthly CPI, or the specific quarter for GDP). This is *not* the release date.
* **`realtime_start`**: This indicates the first date on which the observation was available in the FRED database. For the *latest* observation, this is often very close to, or is, the initial release date of that data point.
* **`realtime_end`**: This indicates the last date on which the observation was considered valid in the FRED database. If a data point is revised, its `realtime_end` would be the date before the revision was published, and a new observation with a new `realtime_start` would appear.

For your specific request, "I just want to pull the relevant period (e.g. The CPI was released on July 15, 2025 - I want to pull in that date)", the `realtime_start` field of the most recent observation for a given series would be the closest direct equivalent to the "release date" of that particular data point as recorded by FRED.

FRED also has dedicated endpoints for releases and release dates (`fred/releases` and `fred/release/dates`) which provide official announcement dates for various economic releases. However, linking these general release dates directly to individual series observations can be more complex programmatically if you need to precisely match a specific observation's value to its *initial* release date, especially for historical data that might have undergone revisions.

Your current Python script's "Date of Release" column is an *estimated next release date* based on the frequency, not a historical release date pulled from FRED. To populate that column with actual `realtime_start` dates from FRED for the current reading, you would modify your `fetch_fred_series` function to also return the `realtime_start` of the latest observation and use that in your `data_records`.