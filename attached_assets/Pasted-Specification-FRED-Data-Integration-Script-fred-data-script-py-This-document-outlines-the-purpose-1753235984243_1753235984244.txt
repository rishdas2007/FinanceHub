Specification: FRED Data Integration Script (fred_data_script.py)
This document outlines the purpose, functionality, inputs, and outputs of the fred_data_script.py Python script, designed to serve as the data backbone for an economic indicators dashboard.

1. Purpose
The primary purpose of the fred_data_script.py is to:

Automate Data Collection: Periodically fetch the latest macroeconomic data from the Federal Reserve Economic Data (FRED) API.

Process and Calculate Metrics: Compute key analytical metrics such as Z-scores, annualized rates, and year-over-year changes based on the fetched historical data.

Generate Structured Output: Produce a standardized CSV file (macroeconomic_indicators_dataset.csv) containing the processed and calculated economic indicators, ready for consumption by a frontend dashboard.

2. Inputs
FRED API Key: A mandatory API key obtained from the FRED website (https://fred.stlouisfed.org/docs/api/api_key.html). This key is essential for authenticating requests to the FRED API and accessing economic data. It is expected to be set as a string constant within the script (FRED_API_KEY).

Predefined FRED Series Mappings: A Python dictionary (fred_series_map) within the script that defines:

Metric Name: A human-readable name for each economic indicator (e.g., 'GDP Growth Rate', 'CPI Year-over-Year').

FRED Series ID (id): The unique identifier for the corresponding economic data series on the FRED database (e.g., 'A191RL1Q225SBEA' for GDP Growth Rate).

Type (type): Classification of the indicator (e.g., 'leading', 'coincident', 'lagging').

Category (category): Economic sector or focus (e.g., 'growth', 'inflation', 'labor').

Frequency (frequency): How often the data is released (e.g., 'monthly', 'quarterly', 'daily', 'meeting').

Unit (unit): The measurement unit of the data (e.g., 'percent', 'index', 'thousands', 'basis_points').

Lookback Months (lookback_months): The approximate number of months of historical data to fetch for calculations (e.g., 24 months for 12-month YoY change).

Forecast (forecast): A predefined forecast value for the metric, used for variance calculation.

Prior Offset (prior_offset): The offset from the latest reading to determine the prior reading (e.g., 1 for the immediate previous period).

3. Core Functionality
The script performs the following steps for each indicator defined in fred_series_map:

A. Data Fetching:

Constructs a request to the FRED API using the requests library.

Uses the series_id, api_key, and specified observation_start date (calculated to ensure sufficient historical data) and frequency to retrieve observations.

Handles potential HTTP errors and missing data.

Parses the JSON response from FRED to extract numerical observation values.

B. Data Processing and Calculation:

Current Reading: Retrieves the most recent data point from the fetched observations.

Prior Reading: Retrieves a historical data point based on the prior_offset from the current reading.

Z-Score (12M): Calculates the Z-score of the current reading relative to the mean and standard deviation of the recent 12 months (or available historical data). This indicates how many standard deviations the current reading is from the average.

3-Month Annualized Rate: Computes an annualized rate based on the last three available data points, adjusted for the indicator's frequency and unit.

12-Month YoY Change: Calculates the percentage change of the current reading compared to the reading from 12 months prior.

Variance vs Forecast: Calculates the difference between the Current Reading and the predefined Forecast value.

Variance vs Prior: Calculates the difference between the Current Reading and the Prior Reading.

Next Release Date: A simplified estimation of the next data release date based on the indicator's frequency. (Note: For a production system, a more robust method involving FRED's release calendar or external data sources would be recommended.)

C. Data Structuring:

Aggregates all calculated metrics and original metadata into a dictionary for each indicator.

Appends these dictionaries to a list of records.

4. Outputs
macroeconomic_indicators_dataset.csv: A CSV file generated in the same directory as the script. This file contains a tabular representation of all processed economic indicators with the following columns:

Metric

Type

Category

Frequency

Date of Release

Current Reading

Forecast

Variance vs Forecast

Prior Reading

Variance vs Prior

Z-Score (12M)

3-Month Annualized Rate

12-Month YoY Change

Unit

Console Output: Prints summary statistics and status messages during execution, including the first 10 rows of the generated DataFrame, total indicators, and counts by Type, Category, and Frequency.

5. Integration with Live Dashboard (Periodic Updates)
The fred_data_script.py acts as the data provider for your HTML economic dashboard. The HTML dashboard itself is a static file that reads the macroeconomic_indicators_dataset.csv.

To achieve "live data updates every 4 hours," you need a mechanism to execute this Python script on a recurring schedule in a server-side or cloud environment. The process would be:

Scheduled Execution: Set up a scheduled task (e.g., a cron job on a Linux server, Task Scheduler on Windows, a cloud function like Google Cloud Functions or AWS Lambda with a Cloud Scheduler/EventBridge trigger) to run fred_data_script.py every 4 hours.

CSV Update: Each time the script runs, it fetches the latest data from FRED, performs calculations, and overwrites the macroeconomic_indicators_dataset.csv file with the most current information.

Dashboard Refresh: Your HTML dashboard, when loaded or when the "Refresh Data" button is clicked, performs a fetch request to read the latest macroeconomic_indicators_dataset.csv file. Since the Python script updates this file, the dashboard will display the newly fetched data.

Important Consideration: The HTML dashboard directly accesses the macroeconomic_indicators_dataset.csv file. In a production environment, this CSV file would need to be hosted on a web server or cloud storage accessible by the dashboard. The scheduled task would update this hosted file.