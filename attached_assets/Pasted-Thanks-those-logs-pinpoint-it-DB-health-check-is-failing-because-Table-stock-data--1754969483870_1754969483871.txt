Thanks—those logs pinpoint it:

* **DB health check is failing** because:

  * Table **`stock_data`** doesn’t exist.
  * Table **`technical_indicators`** is **missing column `macd_line`**.
* You also have **slow queries** on `/api/top-movers` and `/etf-metrics` (5s+), which usually means either the tables are missing or they’re unindexed → full scans.

Let’s fix this in the right order and make the API resilient meanwhile.

---

# 1) Schema migrations (SQL you can run now)

### 1A) Create `stock_data` (with the indexes your queries expect)

```sql
-- 1) Core OHLCV table
CREATE TABLE IF NOT EXISTS stock_data (
  symbol        text        NOT NULL,
  ts            timestamptz NOT NULL,
  open          numeric,
  high          numeric,
  low           numeric,
  close         numeric,
  volume        bigint,
  PRIMARY KEY (symbol, ts)
);

-- 2) Helpful indexes for time-window queries
CREATE INDEX IF NOT EXISTS idx_stock_data_symbol_ts_desc
  ON stock_data (symbol, ts DESC);

-- Optional: if you often filter by date ranges only
CREATE INDEX IF NOT EXISTS idx_stock_data_ts_desc
  ON stock_data (ts DESC);
```

### 1B) Ensure `technical_indicators.macd_line` exists (handle both cases)

```sql
-- Case 1: if you previously stored MACD as column "macd", just rename it.
DO $$
BEGIN
  IF EXISTS (
    SELECT 1 FROM information_schema.columns
    WHERE table_name='technical_indicators' AND column_name='macd'
  ) AND NOT EXISTS (
    SELECT 1 FROM information_schema.columns
    WHERE table_name='technical_indicators' AND column_name='macd_line'
  ) THEN
    ALTER TABLE technical_indicators RENAME COLUMN macd TO macd_line;
  END IF;
END $$;

-- Case 2: if neither "macd" nor "macd_line" exists, add it.
ALTER TABLE technical_indicators
  ADD COLUMN IF NOT EXISTS macd_line numeric;

-- (Optional) If you have separate fast/slow EMA columns, you can backfill:
-- UPDATE technical_indicators
-- SET macd_line = ema12 - ema26
-- WHERE macd_line IS NULL AND ema12 IS NOT NULL AND ema26 IS NOT NULL;

-- Indexes that matter for your lookups
CREATE INDEX IF NOT EXISTS idx_ti_symbol_ts_desc
  ON technical_indicators (symbol, ts DESC);
```

### 1C) Ensure the materialized/latest ETF table exists (you already created something similar)

```sql
CREATE TABLE IF NOT EXISTS etf_metrics_latest (
  symbol          text PRIMARY KEY,
  name            text NOT NULL,
  last_price      numeric NOT NULL,
  pct_change_1d   numeric NOT NULL,
  perf_5d         numeric,
  perf_1m         numeric,
  volume          bigint,
  rsi             numeric,
  macd            numeric,
  bb_percent_b    numeric,
  sma_50          numeric,
  sma_200         numeric,
  ema_21          numeric,
  mini_trend_30d  jsonb NOT NULL,
  updated_at      timestamptz DEFAULT now()
);
```

> After applying: `VACUUM (ANALYZE) stock_data; VACUUM (ANALYZE) technical_indicators;` so the planner gets fresh stats.

---

# 2) If you’re using Drizzle ORM, here’s a minimal migration

Create a migration file, e.g. `drizzle/20250812_add_stock_and_macd.ts`:

```ts
import { sql } from 'drizzle-orm';

export const up = async (db: any) => {
  await db.execute(sql`
    CREATE TABLE IF NOT EXISTS stock_data (
      symbol text NOT NULL,
      ts timestamptz NOT NULL,
      open numeric,
      high numeric,
      low numeric,
      close numeric,
      volume bigint,
      PRIMARY KEY (symbol, ts)
    );
    CREATE INDEX IF NOT EXISTS idx_stock_data_symbol_ts_desc ON stock_data (symbol, ts DESC);
    CREATE INDEX IF NOT EXISTS idx_stock_data_ts_desc ON stock_data (ts DESC);
  `);

  await db.execute(sql`
    DO $$
    BEGIN
      IF EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name='technical_indicators' AND column_name='macd'
      ) AND NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name='technical_indicators' AND column_name='macd_line'
      ) THEN
        ALTER TABLE technical_indicators RENAME COLUMN macd TO macd_line;
      END IF;
    END $$;
    ALTER TABLE technical_indicators
      ADD COLUMN IF NOT EXISTS macd_line numeric;
    CREATE INDEX IF NOT EXISTS idx_ti_symbol_ts_desc ON technical_indicators (symbol, ts DESC);
  `);

  await db.execute(sql`
    CREATE TABLE IF NOT EXISTS etf_metrics_latest (
      symbol text PRIMARY KEY,
      name text NOT NULL,
      last_price numeric NOT NULL,
      pct_change_1d numeric NOT NULL,
      perf_5d numeric,
      perf_1m numeric,
      volume bigint,
      rsi numeric,
      macd numeric,
      bb_percent_b numeric,
      sma_50 numeric,
      sma_200 numeric,
      ema_21 numeric,
      mini_trend_30d jsonb NOT NULL,
      updated_at timestamptz DEFAULT now()
    );
  `);
};

export const down = async (db: any) => {
  // usually no-op; keep data
};
```

Then run:

```bash
npm run db:push   # or your drizzle migrate command
```

---

# 3) Make startup resilient until migrations are applied

Right now your **health check hard-fails** when a table/column is missing, which bricks the app. Soften it to **warn** and keep serving cached/other endpoints:

```ts
// middleware/dbHealth.ts
try {
  await db.execute('SELECT 1 FROM stock_data LIMIT 1');        // or information_schema check
} catch {
  logger.warn('Required table stock_data does not exist');
  // return { ok: false, critical: false }  // don’t throw
}

try {
  await db.execute(`
    SELECT 1
    FROM information_schema.columns
    WHERE table_name='technical_indicators' AND column_name='macd_line'
  `);
} catch {
  logger.warn('technical_indicators missing required columns: macd_line');
  // return { ok: false, critical: false }
}
```

And in your `/health` route, surface status but **HTTP 200** with a body like `{ ok: true, db: { warnings: [...] } }` so your proxy doesn’t mark the app unhealthy.

---

# 4) Fix the “API request failed” symptom you saw earlier

A separate, but related symptom: you’re returning **304** for `/api/econ/sparkline` (that’s fine) — make sure your client **doesn’t call `response.json()` on 304**. Use the 304-safe fetch wrapper from my previous message (keep previous data on 304). That alone removes the “Failed to load” card if the backend is healthy.

---

# 5) Reduce slow endpoints (`/api/top-movers`, `/etf-metrics`)

Once the schema exists, these are the usual speed levers:

* Ensure queries hit **`idx_stock_data_symbol_ts_desc`** and **`idx_ti_symbol_ts_desc`**.
* Read `/etf-metrics` from **`etf_metrics_latest`** (one indexed SELECT) rather than building metrics on the fly.
* Add `LIMIT` + `WHERE ts >= now() - interval 'X days'` for “top movers” so you don’t scan the entire history.
* Return only fields the UI renders to keep the payload tiny.

If it’s still slow, run:

```sql
EXPLAIN (ANALYZE, BUFFERS)
SELECT ... FROM stock_data WHERE symbol IN ('SPY','XLK',...) AND ts >= now() - interval '5 days' ORDER BY ts DESC;
```

Share the plan and I’ll give you indexes/hints tailored to it.

---

# 6) Sanity checklist after you run the migrations

* `\dt` shows `stock_data`, `technical_indicators`, `etf_metrics_latest`.
* `\d technical_indicators` shows `macd_line`.
* `/api/v2/etf-metrics?bulk=true` returns 200 in <200ms (or 304 on repeat).
* Dashboard: exactly **one** bulk request on first paint; no JSON parse errors on 304.

If you want, I can output a ready-to-run `.sql` file and a Drizzle migration file bundled as a download.
