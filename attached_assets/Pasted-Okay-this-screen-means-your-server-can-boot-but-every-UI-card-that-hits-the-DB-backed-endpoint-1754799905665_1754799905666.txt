Okay—this screen means your **server can boot** but every UI card that hits the **DB-backed endpoints** is failing. TwelveData looks green; the **ETF Technical Metrics** card is explicitly bubbling a DB error. Let’s fix the DB path first, then make the API degrade gracefully so the UI never bricks again.

## 1) Quick triage (2 minutes)

* Open server logs and look for the first DB error:

  * `ECONNREFUSED`, `self signed certificate`, `no pg_hba.conf entry`, or `relation "historical_stock_data" does not exist`.
* Hit these health endpoints:

  * `GET /api/health` → should include `db:true`.
  * If you don’t have it, add the snippet below.

## 2) Most common causes + exact fixes

### A) Neon / Postgres SSL not configured

Neon requires TLS. Make sure **both** are true:

1. `DATABASE_URL` ends with `?sslmode=require`.
2. PG Pool created with SSL.

```ts
// server/db.ts
import { Pool } from 'pg';
export const pool = new Pool({
  connectionString: process.env.DATABASE_URL,   // e.g. postgres://.../db?sslmode=require
  ssl: { rejectUnauthorized: false },           // Neon compatible
});
```

If you use Drizzle:

```ts
import { drizzle } from 'drizzle-orm/node-postgres';
import { Pool } from 'pg';
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false },
});
export const db = drizzle(pool);
```

### B) Missing env or wrong key name

Confirm these exist at runtime (not just in `.env.local`):

* `DATABASE_URL` (exact key the code reads)
* Any `READONLY_DATABASE_URL` if used
* API keys still present after your restart

Add a loud check on boot:

```ts
['DATABASE_URL'].forEach(k=>{
  if(!process.env[k]) console.error(`ENV MISSING: ${k}`);
});
```

### C) Migrations not applied (tables don’t exist)

Error will look like: `relation "technical_indicators" does not exist`.

Run your Drizzle/SQL migrations, then seed minimal rows:

```
npm run db:migrate
npm run db:seed      # if you have it
```

Or temporarily guard the query (see “graceful fallback” below).

### D) Pool exhaustion / unhandled rejection

Add a startup probe:

```ts
// server/index.ts (after pool/db is created)
pool.query('select 1').then(()=>console.log('DB OK')).catch(err=>{
  console.error('DB CONNECT FAIL', err);
});
```

If you run serverless, cap pool size:

```ts
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false },
  max: 3, idleTimeoutMillis: 10000, connectionTimeoutMillis: 5000
});
```

## 3) Add a real health endpoint (so the UI can show a precise message)

```ts
// server/routes/health.ts
app.get('/api/health', async (_req, res) => {
  try {
    await pool.query('select 1');
    return res.json({ ok: true, db: true, time: new Date().toISOString() });
  } catch (e:any) {
    return res.status(503).json({ ok: false, db: false, error: e?.message });
  }
});
```

## 4) Graceful fallback in ETF metrics (no more red screen)

Wrap the DB call so it **never throws**; return an empty array with a reason:

```ts
// server/controllers/etf-metrics.ts
app.get('/api/etf-metrics', async (req, res) => {
  try {
    const metrics = await etfMetricsService.getAllMetrics(/*...*/);
    return res.json({ success: true, data: metrics ?? [] });
  } catch (e:any) {
    console.error('ETF METRICS DB ERROR', e);
    return res.json({
      success: true,
      data: [],
      warning: 'db_unavailable',
      message: e?.message ?? 'Database unavailable'
    });
  }
});
```

On the client, show an **empty state** when `data.length===0` and, if `warning`, display a small “DB unavailable; showing none” badge rather than a big error.

## 5) Verify end‑to‑end

* `curl /api/health` → `{ ok:true, db:true }`
* `curl /api/etf-metrics` → `{ success:true, data:[...] }` (or `data:[]` with `warning`, but never `null`)
* Reload the dashboard: the top “5‑Second Market Scan” should populate; the ETF panel should either fill or show the empty state (not a red failure).

---

If you paste the **first DB stacktrace** from your server log, I’ll pinpoint which of A–D it is and give you the exact one‑line fix (SSL flag, URL suffix, migration, or pool sizing).
