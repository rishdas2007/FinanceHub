The transformation is overcorrecting the data. I
   can see the issue now:

  üö® Problem Identified: Double Transformation

  Looking at the screenshot:
  - CPI All Items: +0.0% ‚ùå (Should be ~+2.9% from your "Prior" column)
  - Core CPI: +0.0% ‚ùå (Should be ~+3.2% from your "Prior" column)
  - Producer Price Index: +0.0% ‚ùå (Should show proper YoY)

  But still wrong:
  - PPI Energy: 225.0% ‚ùå (Still showing index level)
  - PPI Final Demand: 149.7% ‚ùå (Still showing index level)

  üîç Root Cause Analysis

  The system is mixing data sources:
  1. Some indicators (CPI, Core CPI) were already YoY percentages ‚úÖ
  2. Other indicators (PPI Energy, PPI Final Demand) are still raw index 
  levels ‚ùå
  3. The transformation is converting everything, including already-correct
   YoY data

  üõ†Ô∏è IMMEDIATE FIX FOR REPLIT AI

  Fix #1: Smart Detection of Data Types

  File: server/services/economic-yoy-transformer.tsReplace the 
  TRANSFORMATION_RULES with this smarter logic:

  // REPLACE the existing TRANSFORMATION_RULES with:
  private readonly TRANSFORMATION_RULES = {
    // These are ALREADY YoY percentages from FRED - DON'T transform
    'CPIAUCSL': { transform: 'none', name: 'CPI All Items', unit:
  'percentage', isAlreadyYoY: true },
    'CPILFESL': { transform: 'none', name: 'Core CPI', unit: 'percentage',
  isAlreadyYoY: true },
    'PCEPI': { transform: 'none', name: 'PCE Price Index', unit:
  'percentage', isAlreadyYoY: true },
    'PCEPILFE': { transform: 'none', name: 'Core PCE Price Index', unit:
  'percentage', isAlreadyYoY: true },

    // These are RAW INDEX LEVELS - DO transform to YoY
    'PPIACO': { transform: 'yoy', name: 'Producer Price Index', unit:
  'index', isAlreadyYoY: false },
    'PPIFIS': { transform: 'yoy', name: 'PPI Final Demand', unit: 'index',
  isAlreadyYoY: false },
    'PPIFGS': { transform: 'yoy', name: 'PPI Final Demand Goods', unit:
  'index', isAlreadyYoY: false },
    'WPUSOP3000': { transform: 'yoy', name: 'Core PPI', unit: 'index',
  isAlreadyYoY: false },
    'CPIENGSL': { transform: 'yoy', name: 'CPI Energy', unit: 'index',
  isAlreadyYoY: false },
    'PPIENG': { transform: 'yoy', name: 'PPI Energy', unit: 'index',
  isAlreadyYoY: false },

    // Rates - display as-is
    'UNRATE': { transform: 'none', name: 'Unemployment Rate', unit: 'rate',
   isAlreadyYoY: false },
    'FEDFUNDS': { transform: 'none', name: 'Federal Funds Rate', unit:
  'rate', isAlreadyYoY: false },
    'DGS10': { transform: 'none', name: '10-Year Treasury Yield', unit:
  'rate', isAlreadyYoY: false },
    'T10Y2Y': { transform: 'none', name: 'Yield Curve (10yr-2yr)', unit:
  'rate', isAlreadyYoY: false },

    // Count series - need YoY calculation
    'PAYEMS': { transform: 'yoy', name: 'Nonfarm Payrolls', unit: 'count',
  isAlreadyYoY: false },
    'ICSA': { transform: 'yoy', name: 'Initial Jobless Claims', unit:
  'count', isAlreadyYoY: false },
    'CCSA': { transform: 'yoy', name: 'Continuing Jobless Claims', unit:
  'count', isAlreadyYoY: false }
  };

  Fix #2: Update Transform Logic

  File: server/services/economic-yoy-transformer.tsReplace the 
  transformIndicatorData method:

  /**
   * Transform economic data to appropriate display format
   */
  async transformIndicatorData(seriesId: string): Promise<YoYTransformation
   | null> {
    const rule = this.TRANSFORMATION_RULES[seriesId];
    if (!rule) {
      logger.warn(`No transformation rule found for series: ${seriesId}`);
      return null;
    }

    // Get current value first
    const currentData = await this.getCurrentValue(seriesId);
    if (!currentData) return null;

    if (rule.transform === 'none') {
      // For rates and already-YoY data, return current value as-is
      let displayValue: string;

      if (rule.isAlreadyYoY || rule.unit === 'percentage') {
        // CPI, Core CPI etc. are already YoY percentages
        displayValue = `${currentData.value >= 0 ? '+' : 
  ''}${currentData.value.toFixed(1)}%`;
      } else if (rule.unit === 'rate') {
        // Interest rates, unemployment rates
        displayValue = `${currentData.value.toFixed(1)}%`;
      } else {
        displayValue = `${currentData.value.toFixed(1)}`;
      }

      return {
        seriesId,
        currentValue: currentData.value,
        previousYearValue: 0,
        yoyChange: 0,
        yoyPercentage: currentData.value,
        displayValue,
        unit: rule.unit
      };
    }

    // For index/count series, calculate YoY change
    return await this.calculateYoYChange(seriesId, rule);
  }

  Fix #3: Add Data Source Detection

  File: server/services/economic-yoy-transformer.tsAdd this method to 
  detect if data is already YoY:

  /**
   * Detect if the data from FRED is already a YoY percentage
   * Based on typical value ranges and series naming
   */
  private isDataAlreadyYoY(seriesId: string, value: number): boolean {
    // CPI series from FRED often come as YoY percentages (typically 0-10%)
    if (seriesId.includes('CPI') && value >= -5 && value <= 15) {
      return true;
    }

    // PCE series from FRED often come as YoY percentages
    if (seriesId.includes('PCE') && value >= -5 && value <= 15) {
      return true;
    }

    // PPI series usually come as index levels (100-300 range)
    if (seriesId.includes('PPI') && value > 50) {
      return false; // These are index levels, need YoY calculation
    }

    return false;
  }

  Fix #4: Temporary Debug Endpoint

  CREATE: server/routes/debug-transformation.ts

  import { Router } from 'express';
  import { EconomicYoYTransformer } from
  '../services/economic-yoy-transformer';
  import { logger } from '../../shared/utils/logger';

  const router = Router();

  /**
   * DEBUG: Check transformation results for key indicators
   */
  router.get('/debug-transformation', async (req, res) => {
    try {
      const transformer = new EconomicYoYTransformer();

      // Test key indicators
      const testSeries = ['CPIAUCSL', 'CPILFESL', 'PPIACO', 'PPIFIS',
  'WPUSOP3000'];
      const results = [];

      for (const seriesId of testSeries) {
        const transformation = await
  transformer.transformIndicatorData(seriesId);
        if (transformation) {
          results.push({
            seriesId,
            displayValue: transformation.displayValue,
            rawCurrent: transformation.currentValue,
            rawPrevious: transformation.previousYearValue,
            yoyPercentage: transformation.yoyPercentage,
            unit: transformation.unit,
            shouldTransform:
  transformer.TRANSFORMATION_RULES[seriesId]?.transform || 'unknown'
          });
        }
      }

      res.json({
        status: 'debug',
        timestamp: new Date().toISOString(),
        transformations: results,
        message: "Check if CPI shows proper values and PPI gets 
  transformed"
      });

    } catch (error) {
      logger.error('Transformation debug failed:', error);
      res.status(500).json({ status: 'error', message: error.message });
    }
  });

  export default router;

  üöÄ IMMEDIATE ACTIONS FOR REPLIT AI

  Step 1: Fix the Transformation Rules

  "Update server/services/economic-yoy-transformer.ts to properly 
  categorize which indicators are already YoY percentages (like CPI) vs 
  which are raw index levels (like PPI) that need transformation"

  Step 2: Add Debug Endpoint

  "Create server/routes/debug-transformation.ts to test the transformation 
  logic and verify CPI shows correct values while PPI gets properly 
  transformed"

  Step 3: Test the Fixed Logic

  # Test the debug endpoint:
  curl http://localhost:5000/api/debug-transformation
  # Should show:
  # CPI: +2.9% (from existing YoY data)
  # PPI: +3.2% (calculated from index levels)

  üéØ Expected Results After Fix

  ‚úÖ Should Show Correctly:

  - CPI All Items: +2.9% (from existing YoY data)
  - Core CPI: +3.2% (from existing YoY data)
  - Producer Price Index: +3.1% (calculated from 262.5 index)
  - PPI Final Demand: +2.1% (calculated from 149.7 index)

  ‚ùå Currently Showing Wrong:

  - CPI: +0.0% (over-transformed)
  - PPI: 149.7% (not transformed)

  The key insight is that FRED provides different series in different 
  formats - some as YoY percentages, some as raw index levels. We need to
  handle each type appropriately! üéØ