I can’t read the tarball from here, so I can’t *confirm* line-by-line—but we can know in \~10 minutes whether the optimizations landed correctly. Below is a tight verification checklist (with copy-paste SQL/cURL) that will surface any misses fast. If any check fails, paste the output and I’ll pinpoint the fix.

---

# 1) Database: schema & data checks

## 1.1 Columns exist (including new component z’s)

```sql
-- features table + required columns
select column_name
from information_schema.columns
where table_name='equity_features_daily'
order by column_name;

-- indexes
select indexname, indexdef
from pg_indexes
where tablename in ('equity_features_daily','equity_daily_bars')
order by 1;
```

**Expect:** `composite_z_60d, dz1_60d, dz5_60d, macd_z_60d, rsi14, bb_pctb_20, ma50, ma200, ma_gap_pct, atr14, rs_spy_30d, rs_spy_90d, beta_spy_252d, corr_spy_252d, vol_dollar_20d, rsi_z_60d, bb_z_60d, ma_gap_z_60d, mom5d_z_60d` present; indexes `idx_edb_symbol_date`, `idx_efd_sym_date(_h)` exist.

## 1.2 Fresh data (last week, 60D horizon)

```sql
-- at least 11–12 ETFs, last 5 trading days populated with composite_z_60d
with last5 as (
  select symbol, asof_date
  from equity_features_daily
  where horizon='60D' and asof_date >= (current_date - interval '7 days')
)
select count(distinct symbol) as symbols, min(asof_date) as from_d, max(asof_date) as to_d
from last5;

-- no-null sanity for core fields (yesterday)
select symbol,
       composite_z_60d is not null as has_comp,
       rsi14 is not null as has_rsi,
       bb_pctb_20 is not null as has_bb,
       ma_gap_pct is not null as has_gap,
       atr14 is not null as has_atr
from equity_features_daily
where horizon='60D' and asof_date = (select max(asof_date) from equity_features_daily where horizon='60D')
order by symbol;
```

**Expect:** \~12 symbols; booleans mostly `t`.

## 1.3 Bars present for price/pct

```sql
select count(*) from equity_daily_bars;
select symbol, max(ts_utc)::date as last_bar
from equity_daily_bars
group by symbol
order by symbol;
```

**Expect:** non-zero count; last\_bar = most recent trading day.

---

# 2) Services/APIs: shape, caching, resilience

## 2.1 ETF metrics endpoint

```bash
curl -sS "https://<your-host>/api/etf/metrics?horizon=60D" | jq .
```

**Expect (200):**

* Root: `{ success:true, data:[…] }` or object with `{benchmark, signals}` depending on your implementation.
* For SPY/XLK rows: keys `price,pctChange,compositeZ,dz1,dz5,components,ma,atr14,rs,liq,sparkZ`.
* **No 500s**. On empty features, you should still get `{ success:true, data:[], warning:"no_features" }` (not an error).

## 2.2 Movers (econ & etf) endpoints

```bash
curl -sS "https://<host>/api/movers/etf?universe=SPY,XLK,XLF&limit=6" | jq .
curl -sS "https://<host>/api/movers/econ?limit=5" | jq .
```

**Expect (200):** structured payloads; arrays may be empty but never `{error:…}`.

## 2.3 Sparkline API for economic series

```bash
curl -sS "https://<host>/api/econ/sparkline?seriesId=CPIAUCSL&months=12" | jq .
```

**Expect:** `{success:true,data:[{t,value}…],meta:{…}}`.

---

# 3) Build/deploy: module import correctness (the zscore utils)

On the server pod/instance:

```bash
node -e "import('file://$PWD/dist/server/utils/zscore-utils.js').then(_=>console.log('ok')).catch(e=>{console.error(e);process.exit(1)})"
```

**Expect:** `ok`.
If it throws:

* Ensure **ESM** or **CJS** is consistent.
* ESM needs **`.js` extension** and **case-exact path** in imports:

  ```ts
  import { orientedZ } from "../utils/zscore-utils.js";
  ```
* Confirm file exists: `ls dist/server/utils/zscore-utils.js`.

---

# 4) Color orientation logic (quick UI sanity)

Open the dashboard, pick a row where:

* **RSI z** is **negative** → the cell’s color should be **green** (oversold is buy-helping).
* **Bollinger z** is **negative** → **green**.
* **MACD/MA-gap/5-day z** positive → **green**.

If not, the UI isn’t using oriented component z’s (or polarity table). Ensure you now render from **`rsi_z_60d`, `bb_z_60d`, `ma_gap_z_60d`, `mom5d_z_60d`** and apply the polarity: RSI/Boll → −z, others → +z.

---

# 5) Time zone & market clock

```bash
curl -sS "https://<host>/api/market-status" | jq .
```

**Expect:** `{nowUtc, nextOpenUtc, nextCloseUtc, isOpen}` in UTC.
In the browser, change system time zone (or spoof) → the header times should localize correctly; fallback to ET if unknown.

---

# 6) Performance spot-checks

* Cold `/api/etf/metrics` < 300 ms; warm (cache) < 100 ms.
* `EXPLAIN ANALYZE` (optional) shows the features query uses `idx_efd_sym_date_h` or `idx_efd_sym_date`.

```sql
explain analyze
with u as (select unnest(array['SPY','XLK','XLF']::text[]) symbol),
mx as (
  select symbol, max(asof_date) d
  from equity_features_daily join u using(symbol)
  where horizon='60D'
  group by symbol
)
select f.symbol, f.asof_date, f.composite_z_60d
from equity_features_daily f
join mx on mx.symbol=f.symbol and mx.d=f.asof_date
where f.horizon='60D';
```

---

# 7) Expected results matrix (quick green/red)

* [ ] **Schema present**: all new columns + indexes
* [ ] **Features fresh**: yesterday has non-null composite & components for \~12 ETFs
* [ ] **Bars fresh**: last trading day present for all ETFs
* [ ] **API 200s**: metrics/movers/econ sparkline return success, never 500
* [ ] **Resilience**: empty features → `{success:true,data:[],warning}` (no crash)
* [ ] **Import OK**: `zscore-utils.js` resolvable in `dist` on Linux
* [ ] **Color orientation**: RSI/Boll negative → green; Trend components positive → green
* [ ] **Latency** in budget

---

## If anything fails

Paste:

* The failing **SQL/`jq` output**, and/or
* The **server log stack** for the ETF metrics route,
* The single **import line** you’re using for `zscore-utils`.

I’ll give you the one-liner fix for your repo.
