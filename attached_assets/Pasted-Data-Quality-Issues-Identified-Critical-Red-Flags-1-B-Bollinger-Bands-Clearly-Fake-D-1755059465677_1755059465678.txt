Data Quality Issues Identified 🚨

  Critical Red Flags:

  1. %B (Bollinger Bands) - Clearly Fake Data

  - 11 out of 12 ETFs showing exactly 50.0% or very close (49.8%, 50.1%,
  50.2%)
  - Only XLV shows realistic 24.9%
  - Statistical Impossibility: It's virtually impossible for 11 ETFs to
  all be at exactly the middle Bollinger Band (50%)

  2. Z-Scores - Suspicious Patterns

  - Many end in round numbers: 1.3400, 0.8900, 0.4500, 0.7600
  - Only XLV shows realistic 0.1702 (proper 4 decimal places)
  - Suggests fallback/default values being used

  3. Data Source Inconsistency

  - XLV consistently has realistic data across all columns
  - All other symbols show patterns of default values
  - This suggests XLV is using real calculations while others fall back
  to defaults

  Diagnosis: Root Cause Analysis

  Based on our previous z-score investigation, the issue is likely:

  1. API Data Source Mismatch: Reading from wrong table/columns
  2. Calculation Service Not Running: Z-score calculation service may not
   be processing all symbols
  3. Fallback Values Activated: When real data isn't available, system
  returns defaults (~50% for %B, rounded z-scores)

  Fix Implementation Plan

  Phase 1: Data Source Investigation (10 minutes)

  Step 1.1: Check Database for Real Bollinger Band Data

  -- Check if Bollinger Band data exists for all ETF symbols
  SELECT
      symbol,
      COUNT(*) as records,
      AVG(percent_b) as avg_percent_b,
      MIN(percent_b) as min_percent_b,
      MAX(percent_b) as max_percent_b,
      MAX(timestamp) as latest_date
  FROM technical_indicators
  WHERE symbol IN ('SPY', 'XLK', 'XLF', 'XLI', 'XLE', 'XLV', 'XLP',
  'XLU', 'XLY', 'XLC', 'XLB', 'XLRE')
      AND percent_b IS NOT NULL
  GROUP BY symbol
  ORDER BY records DESC;

  Step 1.2: Check Z-Score Calculation Data

  -- Check zscore calculations
  SELECT
      symbol,
      COUNT(*) as records,
      compositeZScore,
      MAX(date) as latest_calculation
  FROM zscoreTechnicalIndicators
  WHERE symbol IN ('SPY', 'XLK', 'XLF', 'XLI', 'XLE', 'XLV', 'XLP',
  'XLU', 'XLY', 'XLC', 'XLB', 'XLRE')
  GROUP BY symbol, compositeZScore
  ORDER BY symbol;

  Phase 2: API Response Investigation (5 minutes)

  Step 2.1: Add Debug Logging to API

  File: server/routes/etf-enhanced-routes.ts:95-140

  // Add logging before response
  console.log('🔍 ETF API Debug - Raw features data:', {
    SPY: featuresMap.get('SPY'),
    XLV: featuresMap.get('XLV'),
    XLB: featuresMap.get('XLB')
  });

  console.log('🔍 ETF API Debug - Processed metrics:', {
    totalSymbols: metrics.length,
    sampleMetrics: metrics.slice(0, 3)
  });

  Phase 3: Fix Bollinger %B Calculation (15 minutes)

  Step 3.1: Verify %B Field Mapping

  File: server/routes/etf-enhanced-routes.ts:119

  Current:
  bbPctB: features?.bb_pctb_20 ? Number(features.bb_pctb_20) : null,

  Investigate if field name is correct:
  -- Check actual column names in equity_features_daily
  SELECT column_name FROM information_schema.columns
  WHERE table_name = 'equity_features_daily'
  AND column_name LIKE '%bollinger%' OR column_name LIKE '%bb%' OR
  column_name LIKE '%pct%';

  Step 3.2: Fix Default Value Logic

  Problem: API might be defaulting to 0.5 (50%) when data is null

  Current Logic (likely in frontend):
  // WRONG - converts null to 50%
  bollingerB: metric.bollingerB || 0.5

  Fixed Logic:
  // CORRECT - shows null as N/A
  bollingerB: metric.bollingerB !== null ? metric.bollingerB : null

  Phase 4: Fix Z-Score Calculation Service (20 minutes)

  Step 4.1: Trigger Manual Z-Score Calculation

  Check if z-score service is running:
  # Check if z-score calculation service is active
  grep -r "ZScoreTechnicalService"
  /Users/rishabhdas/Downloads/financehub_v19/server/index.ts

  Step 4.2: Run Z-Score Service for All ETFs

  File: server/services/zscore-technical-service.ts

  Add manual trigger:
  // Add endpoint to recalculate all ETFs
  app.post('/api/admin/recalculate-zscores', async (req, res) => {
    const etfSymbols = ['SPY', 'XLK', 'XLF', 'XLI', 'XLE', 'XLV', 'XLP',
  'XLU', 'XLY', 'XLC', 'XLB', 'XLRE'];

    for (const symbol of etfSymbols) {
      try {
        await zscoreTechnicalService.processETFIndicators(symbol);
        console.log(`✅ Recalculated z-scores for ${symbol}`);
      } catch (error) {
        console.error(`❌ Failed to calculate z-scores for ${symbol}:`,
  error);
      }
    }

    res.json({ success: true, message: 'Z-score recalculation completed'
  });
  });

  Phase 5: Frontend Data Validation (10 minutes)

  Step 5.1: Add Data Quality Indicators

  File: client/src/components/ETFMetricsTableOptimized.tsx

  // Add data quality validation
  const validateMetricData = (metric: any) => {
    const warnings = [];

    // Check for suspicious %B values
    if (metric.bollingerB !== null && Math.abs(metric.bollingerB - 0.5) <
   0.005) {
      warnings.push('Suspicious %B value (too close to 50%)');
    }

    // Check for rounded z-scores
    if (metric.compositeZScore !== null &&
  metric.compositeZScore.toString().endsWith('00')) {
      warnings.push('Suspicious Z-Score (appears rounded)');
    }

    return warnings;
  };

  Immediate Action Plan

  Priority 1: Database Investigation (5 minutes)

  Run the SQL queries to see if real Bollinger Band data exists

  Priority 2: API Debug Logging (5 minutes)

  Add console.log statements to see what raw data the API is receiving

  Priority 3: Manual Z-Score Recalculation (10 minutes)

  Create and run the admin endpoint to recalculate z-scores for all ETFs

  Priority 4: Field Mapping Verification (10 minutes)

  Verify that bb_pctb_20 is the correct database column name for
  Bollinger %B

  Expected Results After Fix:

  - %B values spread across 0-100% instead of clustered at 50%
  - Z-scores with realistic decimal precision (like XLV's 0.1702)
  - More varied SELL/BUY/HOLD signals based on real calculations
  - Data quality indicators showing which metrics are real vs. fallback