Core Requirements
1. Data Sources

Primary: MarketWatch Economic Calendar (https://www.marketwatch.com/economy-politics/calendar)
Secondary Sources (for redundancy):

Yahoo Finance Economic Calendar
Investing.com Economic Calendar
Federal Reserve Economic Data (FRED) API



2. Data Schema
javascript// Event Model
{
  id: "unique_identifier",
  date: "2025-07-18T14:30:00Z",
  title: "Consumer Price Index (CPI)",
  country: "US",
  category: "inflation", // inflation, employment, gdp, interest_rates, etc.
  importance: "high", // high, medium, low
  previous_value: "3.2%",
  forecast_value: "3.1%",
  actual_value: "3.0%", // null if not yet released
  currency: "USD",
  source: "marketwatch",
  impact_sentiment: "positive", // positive, negative, neutral
  description: "Monthly measure of inflation...",
  created_at: "2025-07-18T09:00:00Z",
  updated_at: "2025-07-18T14:35:00Z"
}
3. Technical Architecture
Backend Stack:

Node.js with Express.js
PostgreSQL database
Redis for caching
Cron jobs for scheduling

Frontend Stack:

React.js with TypeScript
Chart.js or D3.js for visualizations
Tailwind CSS for styling

Deployment:

Replit hosting with custom domain
Environment variables for API keys and database credentials

4. Data Ingestion System
Scraping Strategy:
javascript// Daily scraper configuration
const scrapingConfig = {
  schedule: "0 6 * * *", // 6 AM daily
  sources: [
    {
      name: "marketwatch",
      url: "https://www.marketwatch.com/economy-politics/calendar",
      selectors: {
        eventRow: ".calendar-row",
        time: ".time-cell",
        event: ".event-title",
        importance: ".importance-indicator",
        previous: ".previous-value",
        forecast: ".forecast-value",
        actual: ".actual-value"
      }
    }
  ],
  lookAhead: 30, // days to scrape ahead
  lookBack: 7    // days to update past events
}
Data Processing Pipeline:

Scrape raw HTML from sources
Parse and normalize event data
Detect duplicates across sources
Validate and clean data
Store in database with conflict resolution
Update existing events with actual values
Log ingestion metrics

5. Database Design
Tables:
sql-- Events table
CREATE TABLE economic_events (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  external_id VARCHAR(255) UNIQUE,
  date_time TIMESTAMP WITH TIME ZONE NOT NULL,
  title VARCHAR(500) NOT NULL,
  country VARCHAR(10) NOT NULL,
  category VARCHAR(100),
  importance VARCHAR(20),
  previous_value TEXT,
  forecast_value TEXT,
  actual_value TEXT,
  currency VARCHAR(10),
  source VARCHAR(50) NOT NULL,
  impact_sentiment VARCHAR(20),
  description TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Ingestion logs
CREATE TABLE ingestion_logs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  run_date DATE NOT NULL,
  source VARCHAR(50) NOT NULL,
  events_scraped INTEGER,
  events_added INTEGER,
  events_updated INTEGER,
  errors TEXT[],
  execution_time_ms INTEGER,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Indexes
CREATE INDEX idx_events_date ON economic_events(date_time);
CREATE INDEX idx_events_category ON economic_events(category);
CREATE INDEX idx_events_importance ON economic_events(importance);
6. API Endpoints
Core APIs:
javascript// Get upcoming events
GET /api/events?start_date=2025-07-18&end_date=2025-07-25&importance=high

// Get historical events for AI analysis
GET /api/events/historical?category=inflation&limit=100

// Get events by category
GET /api/events/category/employment?timeframe=30d

// Get data quality metrics
GET /api/metrics/ingestion

// Webhook for real-time updates
POST /api/webhook/event-update
Response Format:
javascript{
  "success": true,
  "data": {
    "events": [...],
    "pagination": {
      "total": 150,
      "page": 1,
      "per_page": 50
    },
    "metadata": {
      "last_updated": "2025-07-18T14:35:00Z",
      "sources": ["marketwatch", "yahoo_finance"]
    }
  }
}
7. Dashboard Features
Main Dashboard:

Calendar view of upcoming events
Filterable by importance, category, country
Real-time updates for actual values
Historical trend charts
Export functionality (CSV, JSON)

Analytics Panel:

Event impact analysis
Forecast accuracy tracking
Economic sentiment indicators
AI analysis integration display

8. Monitoring & Reliability
Health Checks:

Database connectivity
Scraping success rates
Data freshness validation
API response times

Alerting:

Failed scraping attempts
Data anomalies detection
Missing critical events
API downtime

Error Handling:

Graceful degradation when sources are down
Retry mechanisms with exponential backoff
Data validation with fallback sources