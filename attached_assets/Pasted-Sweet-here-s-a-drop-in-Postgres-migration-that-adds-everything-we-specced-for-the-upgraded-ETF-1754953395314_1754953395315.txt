Sweet — here’s a drop-in **Postgres migration** that adds everything we specced for the upgraded ETF metrics panel (new feature columns, indexes, safety constraints) plus the optional watchlist/alert tables. I’m giving you both **raw SQL** and a **Drizzle TS** version; use whichever matches your pipeline.

---

# Option A — Raw SQL migration

*Save as something like `migrations/20250811_add_etf_features.sql`*

```sql
-- ============================================
-- FinanceHub: ETF features & helpers migration
-- ============================================
-- Safe to re-run: uses IF NOT EXISTS everywhere.
-- Target: Postgres 13+

-- 0) Ensure base tables exist (no-op if present)
-- (Comment out if you already manage them elsewhere)
CREATE TABLE IF NOT EXISTS equity_daily_bars (
  symbol      text NOT NULL,
  ts_utc      timestamptz NOT NULL,
  open        double precision,
  high        double precision,
  low         double precision,
  close       double precision,
  volume      double precision,
  PRIMARY KEY (symbol, ts_utc)
);

CREATE TABLE IF NOT EXISTS equity_features_daily (
  symbol            text NOT NULL,
  asof_date         date NOT NULL,
  horizon           text NOT NULL,   -- e.g., '20D'|'60D'|'252D'
  pipeline_version  text NOT NULL DEFAULT 'v1',
  z_close           double precision,  -- legacy/basic z if you had it
  created_at        timestamptz NOT NULL DEFAULT now(),
  updated_at        timestamptz NOT NULL DEFAULT now()
);

-- 0.1) Uniqueness for features rows (one row per symbol/date/horizon)
CREATE UNIQUE INDEX IF NOT EXISTS idx_efd_uniq
  ON equity_features_daily (symbol, asof_date, horizon);

-- 1) New feature columns (nullable; computed by builder)
ALTER TABLE equity_features_daily
  ADD COLUMN IF NOT EXISTS composite_z_60d   double precision,
  ADD COLUMN IF NOT EXISTS dz1_60d           double precision,
  ADD COLUMN IF NOT EXISTS dz5_60d           double precision,
  ADD COLUMN IF NOT EXISTS macd_z_60d        double precision,
  ADD COLUMN IF NOT EXISTS rsi14             double precision,
  ADD COLUMN IF NOT EXISTS bb_pctb_20        double precision,    -- 0..1
  ADD COLUMN IF NOT EXISTS ma50              double precision,
  ADD COLUMN IF NOT EXISTS ma200             double precision,
  ADD COLUMN IF NOT EXISTS ma_gap_pct        double precision,    -- (ma50-ma200)/ma200
  ADD COLUMN IF NOT EXISTS atr14             double precision,
  ADD COLUMN IF NOT EXISTS rs_spy_30d        double precision,    -- 30D return diff vs SPY
  ADD COLUMN IF NOT EXISTS rs_spy_90d        double precision,
  ADD COLUMN IF NOT EXISTS beta_spy_252d     double precision,
  ADD COLUMN IF NOT EXISTS corr_spy_252d     double precision,
  ADD COLUMN IF NOT EXISTS vol_dollar_20d    double precision;

-- 2) Helpful constraints (non-blocking; comment out if you prefer looser)
-- Keep %B in [0,1] when present
ALTER TABLE equity_features_daily
  ADD CONSTRAINT IF NOT EXISTS chk_efd_bb_pctb_20_range
  CHECK (bb_pctb_20 IS NULL OR (bb_pctb_20 >= 0 AND bb_pctb_20 <= 1));

-- 3) Indexes for fast dashboards
CREATE INDEX IF NOT EXISTS idx_edb_symbol_date
  ON equity_daily_bars (symbol, ts_utc DESC);

CREATE INDEX IF NOT EXISTS idx_efd_sym_date
  ON equity_features_daily (symbol, asof_date DESC);

CREATE INDEX IF NOT EXISTS idx_efd_sym_date_h
  ON equity_features_daily (symbol, asof_date DESC, horizon);

-- 4) (Optional) Watchlist & alerts for later features
CREATE TABLE IF NOT EXISTS user_watchlist (
  user_id     uuid NOT NULL,
  symbol      text NOT NULL,
  created_at  timestamptz NOT NULL DEFAULT now(),
  PRIMARY KEY (user_id, symbol)
);

CREATE TABLE IF NOT EXISTS alert_rules (
  id          uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id     uuid NOT NULL,
  symbol      text NOT NULL,
  rule        text NOT NULL,           -- e.g., 'composite_z_60d<=-1.0'
  horizon     text NOT NULL DEFAULT '60D',
  is_active   boolean NOT NULL DEFAULT true,
  created_at  timestamptz NOT NULL DEFAULT now()
);

-- 5) (Optional) Grant read to app role (replace :app_user)
-- GRANT SELECT ON equity_daily_bars, equity_features_daily TO :app_user;
-- GRANT SELECT, INSERT, UPDATE ON equity_features_daily TO :app_user;
-- GRANT SELECT, INSERT, UPDATE ON alert_rules TO :app_user;
-- GRANT SELECT, INSERT, DELETE ON user_watchlist TO :app_user;

-- 6) Touch updated_at on future upserts (your builder should set it),
--    but if you want a DB-side default trigger you can add it later.
```

---

# Option B — Drizzle migration (TypeScript)

*Save as e.g. `drizzle/20250811_add_etf_features.ts`*

```ts
import { sql } from "drizzle-orm";
import { type Migration } from "./_meta"; // adjust to your drizzle setup

export const up: Migration = async (db) => {
  await db.execute(sql`
    CREATE TABLE IF NOT EXISTS equity_daily_bars (
      symbol      text NOT NULL,
      ts_utc      timestamptz NOT NULL,
      open        double precision,
      high        double precision,
      low         double precision,
      close       double precision,
      volume      double precision,
      PRIMARY KEY (symbol, ts_utc)
    );
  `);

  await db.execute(sql`
    CREATE TABLE IF NOT EXISTS equity_features_daily (
      symbol            text NOT NULL,
      asof_date         date NOT NULL,
      horizon           text NOT NULL,
      pipeline_version  text NOT NULL DEFAULT 'v1',
      z_close           double precision,
      created_at        timestamptz NOT NULL DEFAULT now(),
      updated_at        timestamptz NOT NULL DEFAULT now()
    );
  `);

  await db.execute(sql`
    CREATE UNIQUE INDEX IF NOT EXISTS idx_efd_uniq
      ON equity_features_daily (symbol, asof_date, horizon);
  `);

  await db.execute(sql`
    ALTER TABLE equity_features_daily
      ADD COLUMN IF NOT EXISTS composite_z_60d   double precision,
      ADD COLUMN IF NOT EXISTS dz1_60d           double precision,
      ADD COLUMN IF NOT EXISTS dz5_60d           double precision,
      ADD COLUMN IF NOT EXISTS macd_z_60d        double precision,
      ADD COLUMN IF NOT EXISTS rsi14             double precision,
      ADD COLUMN IF NOT EXISTS bb_pctb_20        double precision,
      ADD COLUMN IF NOT EXISTS ma50              double precision,
      ADD COLUMN IF NOT EXISTS ma200             double precision,
      ADD COLUMN IF NOT EXISTS ma_gap_pct        double precision,
      ADD COLUMN IF NOT EXISTS atr14             double precision,
      ADD COLUMN IF NOT EXISTS rs_spy_30d        double precision,
      ADD COLUMN IF NOT EXISTS rs_spy_90d        double precision,
      ADD COLUMN IF NOT EXISTS beta_spy_252d     double precision,
      ADD COLUMN IF NOT EXISTS corr_spy_252d     double precision,
      ADD COLUMN IF NOT EXISTS vol_dollar_20d    double precision;
  `);

  await db.execute(sql`
    DO $$ BEGIN
      ALTER TABLE equity_features_daily
        ADD CONSTRAINT chk_efd_bb_pctb_20_range
        CHECK (bb_pctb_20 IS NULL OR (bb_pctb_20 >= 0 AND bb_pctb_20 <= 1));
    EXCEPTION WHEN duplicate_object THEN NULL; END $$;
  `);

  await db.execute(sql`
    CREATE INDEX IF NOT EXISTS idx_edb_symbol_date
      ON equity_daily_bars (symbol, ts_utc DESC);
  `);

  await db.execute(sql`
    CREATE INDEX IF NOT EXISTS idx_efd_sym_date
      ON equity_features_daily (symbol, asof_date DESC);
  `);

  await db.execute(sql`
    CREATE INDEX IF NOT EXISTS idx_efd_sym_date_h
      ON equity_features_daily (symbol, asof_date DESC, horizon);
  `);

  await db.execute(sql`
    CREATE TABLE IF NOT EXISTS user_watchlist (
      user_id     uuid NOT NULL,
      symbol      text NOT NULL,
      created_at  timestamptz NOT NULL DEFAULT now(),
      PRIMARY KEY (user_id, symbol)
    );
  `);

  await db.execute(sql`
    CREATE TABLE IF NOT EXISTS alert_rules (
      id          uuid PRIMARY KEY DEFAULT gen_random_uuid(),
      user_id     uuid NOT NULL,
      symbol      text NOT NULL,
      rule        text NOT NULL,
      horizon     text NOT NULL DEFAULT '60D',
      is_active   boolean NOT NULL DEFAULT true,
      created_at  timestamptz NOT NULL DEFAULT now()
    );
  `);
};

export const down: Migration = async (db) => {
  // Non-destructive down: keep base tables; drop only added columns/objects if you must.
  // Safer in prod to leave data in place; implement targeted drops if your policy requires it.
};
```

---

## After you run the migration

1. **Backfill features** (hotfix or full builder), so the grid has data:

   ```sql
   -- at minimum, compute z_close or composite_z_60d for last 300d
   -- (use the backfill SQL I shared earlier or run your Node builder)
   ```
2. Verify:

   ```sql
   select symbol, asof_date, composite_z_60d, rsi14, bb_pctb_20
   from equity_features_daily
   where horizon = '60D'
   order by asof_date desc
   limit 20;
   ```
3. Confirm indexes exist and API latency is good.

Want me to bundle a tiny **feature-builder CLI** next (reads `equity_daily_bars`, computes all fields, and upserts)?
