Great â€” hereâ€™s the enhanced version of the script that:
	1.	âœ… Pulls the 6 most recently updated FRED series
	2.	âœ… Retrieves the latest and prior observation for each
	3.	âœ… Resolves each series ID into a human-readable name
	4.	âœ… Constructs a clear GPT-4o prompt
	5.	âœ… Sends it to GPT for macroeconomic analysis

â¸»

ðŸ§  Full Enhanced Python Script with Series Metadata

import requests
import openai

# --- Configuration ---
FRED_API_KEY = "your_fred_api_key_here"
OPENAI_API_KEY = "your_openai_api_key_here"
openai.api_key = OPENAI_API_KEY

# --- Step 1: Get Most Recently Updated Series IDs ---
def get_recent_fred_series(limit=6):
    url = "https://api.stlouisfed.org/fred/series/updates"
    params = {
        "api_key": FRED_API_KEY,
        "file_type": "json",
        "limit": limit,
        "sort_order": "desc"
    }
    response = requests.get(url, params=params)
    series_list = response.json().get("seriess", [])
    return [s["id"] for s in series_list]

# --- Step 2: Get Series Metadata (Title) ---
def get_series_metadata(series_id):
    url = "https://api.stlouisfed.org/fred/series"
    params = {
        "series_id": series_id,
        "api_key": FRED_API_KEY,
        "file_type": "json"
    }
    response = requests.get(url, params=params)
    series_info = response.json().get("seriess", [])
    return series_info[0]["title"] if series_info else series_id

# --- Step 3: Get Recent Observations ---
def get_recent_observations(series_id):
    url = f"https://api.stlouisfed.org/fred/series/observations"
    params = {
        "series_id": series_id,
        "api_key": FRED_API_KEY,
        "file_type": "json",
        "sort_order": "desc",
        "limit": 2
    }
    response = requests.get(url, params=params)
    observations = response.json().get("observations", [])
    return {
        "series_id": series_id,
        "title": get_series_metadata(series_id),
        "latest": float(observations[0]["value"]) if observations else None,
        "latest_date": observations[0]["date"] if observations else None,
        "prior": float(observations[1]["value"]) if len(observations) > 1 else None,
        "prior_date": observations[1]["date"] if len(observations) > 1 else None
    }

# --- Step 4: Build GPT Prompt ---
def generate_gpt_prompt(economic_data):
    prompt = "You are a macroeconomic analyst. Compare the latest value and prior value for each of the following U.S. economic indicators:\n\n"
    for d in economic_data:
        prompt += (
            f"- {d['title']} ({d['series_id']}): {d['latest']} on {d['latest_date']} "
            f"(Prior: {d['prior']} on {d['prior_date']})\n"
        )
    prompt += "\nSummarize key trends and economic implications for investors and policymakers."
    return prompt

# --- Step 5: GPT Analysis ---
def analyze_with_openai(prompt):
    response = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You are a professional macroeconomic analyst."},
            {"role": "user", "content": prompt}
        ]
    )
    return response.choices[0].message["content"]

# --- Run Full Pipeline ---
def main():
    print("Fetching most recent economic indicators from FRED...")
    series_ids = get_recent_fred_series(limit=6)
    economic_data = [get_recent_observations(sid) for sid in series_ids]
    prompt = generate_gpt_prompt(economic_data)
    print("\n--- GPT Prompt ---\n")
    print(prompt)
    print("\n--- GPT Analysis ---\n")
    analysis = analyze_with_openai(prompt)
    print(analysis)

if __name__ == "__main__":
    main()


â¸»

âœ… Example Output (Simulated)

Prompt to GPT:

- Initial Claims (ICSA): 251000.0 on 2025-07-18 (Prior: 245000.0 on 2025-07-11)
- Durable Goods Orders (DGORDER): 1.2 on 2025-06-30 (Prior: 0.8 on 2025-05-31)
...

GPT Output:

Initial jobless claims rose slightly week-over-week, suggesting mild labor market softening. Durable goods orders showed strength, pointing to sustained industrial investment...


â¸»

Would you like this turned into a web app (e.g. with Streamlit or Flask)?