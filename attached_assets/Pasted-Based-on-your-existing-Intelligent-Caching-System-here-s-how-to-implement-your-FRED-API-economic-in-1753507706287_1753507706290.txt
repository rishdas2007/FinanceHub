Based on your existing Intelligent Caching System, here's how to implement your FRED API economic indicators caching strategy:

## **Economic Data Cache Configuration Updates**

**Modify your existing `economic` cache config** to extend TTL to daily:
- **memoryTtl**: 86400000 (24 hours during market hours)
- **databaseTtl**: 604800000 (7 days for database fallback)
- **maxStaleAge**: 2592000000 (30 days max stale)
- **After Hours/Weekend Multipliers**: Keep at 1x since daily refresh is already conservative

## **Two-Tier Economic Data Caching Strategy**

### **Tier 1: Current Readings Cache**
- **Cache Key Pattern**: `fred_current_{indicator_id}` (e.g., `fred_current_CPIAUCSL`)
- **TTL**: 24 hours (your updated economic config)
- **Data Structure**: Store the latest reading with metadata (date, value, units)
- **Database Table**: `economic_indicators_current`

### **Tier 2: Historical Series Cache**
- **Cache Key Pattern**: `fred_historical_{indicator_id}_12m` (e.g., `fred_historical_CPIAUCSL_12m`)
- **TTL**: 168 hours (7 days) - historical data changes less frequently
- **Data Structure**: Store complete 12-month array with monthly data points
- **Database Table**: `economic_indicators_historical`

## **Caching Implementation Strategy**

### **Initial Data Population**
1. **Bulk Historical Fetch**: On first run, fetch 12 months of historical data for all 24 indicators
2. **Database Persistence**: Store both current readings and historical arrays in separate tables
3. **Memory Cache Population**: Load frequently accessed indicators into memory cache

### **Daily Refresh Cycle**
1. **Current Data**: Fetch latest reading for each indicator (24 API calls)
2. **Historical Update**: Only fetch new monthly data points when month changes (intelligent detection)
3. **Rolling Window**: Maintain exactly 12 months by removing oldest data point when adding new one

### **YoY Calculation Optimization**
1. **Cache YoY Results**: Cache calculated YoY changes separately with key pattern `fred_yoy_{indicator_id}`
2. **Lazy Calculation**: Only recalculate YoY when underlying historical data updates
3. **TTL Inheritance**: YoY cache inherits TTL from historical data (7 days)

## **API Rate Limiting Protection**

### **Staggered Refresh Strategy**
- **Batch Processing**: Update indicators in groups of 5-8 to avoid API burst limits
- **Time Delays**: 1-2 second delays between API calls within batches
- **Priority Queuing**: Critical indicators (CPI, Employment) refresh first

### **Fallback Mechanisms**
- **Stale Data Tolerance**: Allow up to 30 days stale for historical data during API failures
- **Partial Updates**: If some indicators fail, continue with successful ones
- **Emergency Cache**: Keep 60-day emergency cache in database for absolute fallbacks

## **Cache Invalidation Strategy**

### **Scheduled Invalidation**
- **Daily Refresh**: 6 AM EST (before market open) for current readings
- **Monthly Refresh**: 1st of each month for historical data updates
- **Manual Override**: Admin endpoint to force refresh specific indicators

### **Smart Invalidation**
- **Release Calendar Awareness**: Invalidate cache on known release dates for each indicator
- **Change Detection**: Only update cache if new data differs from cached value
- **Cascade Invalidation**: When historical data updates, automatically invalidate related YoY calculations

## **Database Schema Optimization**

### **Indexing Strategy**
- **Primary Index**: indicator_id + date for fast lookups
- **Composite Index**: indicator_id + created_at for cache age queries
- **TTL Index**: expiry_timestamp for automated cleanup

### **Data Compression**
- **JSON Storage**: Store 12-month arrays as compressed JSON in single database field
- **Metadata Separation**: Store frequently queried metadata (last_updated, data_age) in separate columns
- **Archive Strategy**: Move data older than 90 days to archive tables

This approach will reduce your FRED API calls from potentially 288 daily calls (24 indicators Ã— 12 months) to just 24 daily calls, while maintaining fast access to both current and historical data through your intelligent caching system.