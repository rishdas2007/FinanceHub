Economic Data Unit Mismatch Issue - Root Cause Analysis

  You've identified a critical data transformation problem where your
  FRED API is returning index values (275.0, 328.7) but your historical
  data shows year-over-year percentage changes (1.6%, 3.2%).

  This creates meaningless comparisons and misleading percentage 
  calculations.

  Root Cause Analysis

  The Problem:

  - FRED API returns: Index values (e.g., CPI Energy = 275.0)
  - Historical data has: YoY % changes (e.g., CPI Energy = 1.6%)
  - Your calculation: 275.0% - 1.6% = +273.4% ❌ WRONG

  What Should Happen:

  - Convert index to YoY %: CPI Energy 275.0 index → ~2.1% YoY change
  - Compare like-for-like: 2.1% - 1.6% = +0.5% ✅ CORRECT

  Implementation Plan: Fix FRED Data Transformation

  Phase 1: Identify Affected Series (10 minutes)

  Step 1.1: Check Which Series Need YoY Conversion

  -- Check current FRED data vs historical patterns
  SELECT
      series_id,
      indicator,
      AVG(value) as avg_value,
      MIN(value) as min_value,
      MAX(value) as max_value,
      COUNT(*) as records
  FROM economic_data
  WHERE series_id IN ('CPIENG', 'CPILFESL', 'CPIAUCSL', 'PAYEMS')
      AND date >= '2024-01-01'
  GROUP BY series_id, indicator
  ORDER BY avg_value DESC;

  Step 1.2: Categorize Economic Series

  Index-based Series (need YoY conversion):
  - CPIAUCSL - Consumer Price Index
  - CPILFESL - Core CPI
  - CPIENG - CPI Energy
  - PAYEMS - Nonfarm Payrolls

  Rate-based Series (already percentages):
  - UNRATE - Unemployment Rate
  - FEDFUNDS - Federal Funds Rate

  Phase 2: Create YoY Conversion Service (20 minutes)

  Step 2.1: Add YoY Calculation Utility

  File: server/services/economic-data-transformer.ts (new file)

  export class EconomicDataTransformer {

    // Series that should be converted from index to YoY %
    private readonly INDEX_SERIES = new Set([
      'CPIAUCSL',   // Consumer Price Index for All Urban Consumers
      'CPILFESL',   // Core CPI (Less Food and Energy)
      'CPIENG',     // CPI for Energy
      'PAYEMS'      // All Employees, Total Nonfarm
    ]);

    /**
     * Convert index value to year-over-year percentage change
     */
    async convertIndexToYoY(seriesId: string, currentValue: number,
  currentDate: Date): Promise<number | null> {
      if (!this.INDEX_SERIES.has(seriesId)) {
        // Not an index series, return as-is
        return currentValue;
      }

      try {
        // Get value from exactly 12 months ago
        const yearAgoDate = new Date(currentDate);
        yearAgoDate.setFullYear(yearAgoDate.getFullYear() - 1);

        const yearAgoData = await db
          .select()
          .from(economicData)
          .where(
            and(
              eq(economicData.seriesId, seriesId),
              gte(economicData.date, yearAgoDate),
              lte(economicData.date, new Date(yearAgoDate.getTime() + 30
  * 24 * 60 * 60 * 1000)) // +30 days window
            )
          )
          .orderBy(desc(economicData.date))
          .limit(1);

        if (!yearAgoData.length) {
          console.warn(`No year-ago data found for ${seriesId} at 
  ${yearAgoDate.toISOString()}`);
          return null;
        }

        const yearAgoValue = parseFloat(yearAgoData[0].value.toString());

        // Calculate YoY percentage change
        const yoyChange = ((currentValue - yearAgoValue) / yearAgoValue)
  * 100;

        console.log(`📊 YoY Conversion for ${seriesId}:`, {
          current: currentValue,
          yearAgo: yearAgoValue,
          yoyChange: yoyChange.toFixed(2)
        });

        return yoyChange;

      } catch (error) {
        console.error(`Error calculating YoY for ${seriesId}:`, error);
        return null;
      }
    }

    /**
     * Process FRED API response and convert index values to YoY
     */
    async processFredObservation(seriesId: string, observation: any) {
      const rawValue = parseFloat(observation.value);
      const observationDate = new Date(observation.date);

      if (this.INDEX_SERIES.has(seriesId)) {
        // Convert index to YoY percentage
        const yoyValue = await this.convertIndexToYoY(seriesId, rawValue,
   observationDate);

        return {
          seriesId,
          date: observationDate,
          value: yoyValue !== null ? yoyValue : rawValue,
          rawIndexValue: rawValue, // Store original for reference
          dataType: 'yoy_percentage'
        };
      } else {
        // Rate-based series, use as-is
        return {
          seriesId,
          date: observationDate,
          value: rawValue,
          dataType: 'rate'
        };
      }
    }
  }

  export const economicDataTransformer = new EconomicDataTransformer();

  Phase 3: Update FRED API Service (15 minutes)

  Step 3.1: Modify FRED Data Ingestion

  File: server/services/fred-api-service-incremental.ts

  import { economicDataTransformer } from './economic-data-transformer';

  // In the data processing section:
  async updateSeries(seriesId: string) {
    try {
      // ... existing FRED API call ...

      const observations = fredResponse.observations;

      for (const obs of observations) {
        // NEW: Transform the observation using our converter
        const transformedObs = await
  economicDataTransformer.processFredObservation(seriesId, obs);

        // Store the transformed data
        await db.insert(economicData).values({
          seriesId: transformedObs.seriesId,
          date: transformedObs.date,
          value: transformedObs.value,
          // Add metadata about transformation
          metadata: {
            originalValue: transformedObs.rawIndexValue,
            dataType: transformedObs.dataType,
            transformedAt: new Date().toISOString()
          }
        }).onConflictDoUpdate({
          target: [economicData.seriesId, economicData.date],
          set: {
            value: transformedObs.value,
            metadata: {
              originalValue: transformedObs.rawIndexValue,
              dataType: transformedObs.dataType,
              transformedAt: new Date().toISOString()
            }
          }
        });
      }

    } catch (error) {
      console.error(`Error updating series ${seriesId}:`, error);
    }
  }

  Phase 4: Update Economic Health Dashboard (10 minutes)

  Step 4.1: Fix Dashboard Display Logic

  File: Your economic health dashboard service

  // Ensure dashboard shows YoY percentages consistently
  export function formatEconomicIndicator(series: any) {
    const value = parseFloat(series.value);

    // Format based on series type
    if (['CPIAUCSL', 'CPILFESL', 'CPIENG'].includes(series.seriesId)) {
      // CPI series - show as YoY percentage
      return `${value >= 0 ? '+' : ''}${value.toFixed(1)}%`;
    } else if (series.seriesId === 'PAYEMS') {
      // Payrolls - show YoY change in thousands
      return `${value >= 0 ? '+' : ''}${(value * 1000).toFixed(0)}K`;
    } else {
      // Rates - show as percentage
      return `${value.toFixed(1)}%`;
    }
  }

  Phase 5: Data Migration (15 minutes)

  Step 5.1: Convert Existing Wrong Data

  // Add migration endpoint for existing data
  app.post('/api/admin/migrate-economic-data', async (req, res) => {
    try {
      const indexSeries = ['CPIAUCSL', 'CPILFESL', 'CPIENG', 'PAYEMS'];

      for (const seriesId of indexSeries) {
        console.log(`🔄 Migrating ${seriesId} data...`);

        // Get all records for this series
        const records = await db
          .select()
          .from(economicData)
          .where(eq(economicData.seriesId, seriesId))
          .orderBy(asc(economicData.date));

        for (const record of records) {
          const rawValue = parseFloat(record.value.toString());
          const recordDate = new Date(record.date);

          // Convert to YoY using our transformer
          const yoyValue = await
  economicDataTransformer.convertIndexToYoY(seriesId, rawValue,
  recordDate);

          if (yoyValue !== null) {
            await db.update(economicData)
              .set({
                value: yoyValue.toString(),
                metadata: {
                  originalIndexValue: rawValue,
                  transformedAt: new Date().toISOString(),
                  migratedData: true
                }
              })
              .where(
                and(
                  eq(economicData.seriesId, seriesId),
                  eq(economicData.date, record.date)
                )
              );
          }
        }
      }

      res.json({ success: true, message: 'Economic data migration 
  completed' });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  });

  Expected Results After Fix

  Before (Current - WRONG):

  - CPI Energy: 275.0% vs 1.6% = +273.4%
  - Core CPI: 328.7% vs 3.2% = +325.5%

  After (Fixed - CORRECT):

  - CPI Energy: 2.1% vs 1.6% = +0.5%
  - Core CPI: 3.4% vs 3.2% = +0.2%

  Implementation Timeline

  1. Phase 1 (10 min): Identify affected series
  2. Phase 2 (20 min): Create YoY converter service
  3. Phase 3 (15 min): Update FRED API integration
  4. Phase 4 (10 min): Fix dashboard display
  5. Phase 5 (15 min): Migrate existing wrong data

  Total Time: ~70 minutes

  This fix ensures your economic indicators show meaningful 
  year-over-year changes instead of raw index values, making the data
  much more useful for economic analysis.