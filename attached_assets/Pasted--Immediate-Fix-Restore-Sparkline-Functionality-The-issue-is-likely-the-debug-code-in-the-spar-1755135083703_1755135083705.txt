 üö® Immediate Fix: Restore Sparkline Functionality

  The issue is likely the debug code in the sparkline controller that's
  clearing cache and causing errors. Let's fix this immediately:

  Quick Fix 1: Remove Debug Code (URGENT)

  File: /server/controllers/EconSparklineController.ts

  Find lines 37-47 and REMOVE or COMMENT OUT:

  // REMOVE THESE LINES:
  console.log(`üö® CRITICAL DEBUG: ${seriesId} with transform: 
  "${finalTransform}" (type: ${typeof finalTransform})`);
  console.log(`üö® Equality test: finalTransform === 'YOY' ? 
  ${finalTransform === 'YOY'}`);
  console.log(`üö® Strict equality test: finalTransform.toString() === 'YOY'
   ? ${finalTransform.toString() === 'YOY'}`);

  // Clear cache for debugging
  cache.delete(cacheKey);

  // Force explicit YOY check with multiple conditions
  const isYOY = finalTransform === 'YOY' || finalTransform?.toString() ===
  'YOY' || finalTransform?.toUpperCase() === 'YOY';
  console.log(`üö® Is YOY calculation needed? ${isYOY}`);

  Replace with:

  // Simplified YOY check
  const isYOY = finalTransform === 'YOY';

  Quick Fix 2: Simplify Query Logic

  File: /server/controllers/EconSparklineController.ts

  Replace the complex YOY query (lines 51-81) with:

  if (isYOY) {
    // Simplified YOY calculation
    queryResult = await db.execute(sql`
      WITH monthly_data AS (
        SELECT DISTINCT ON (date_trunc('month', period_end)) 
          period_end::date,
          value_std::FLOAT as value_std
        FROM econ_series_observation
        WHERE series_id = ${seriesId}
          AND value_std IS NOT NULL
          AND period_end >= current_date - interval '24 months'
        ORDER BY date_trunc('month', period_end), period_end DESC
      ),
      with_yoy AS (
        SELECT 
          period_end,
          value_std,
          LAG(value_std, 12) OVER (ORDER BY period_end) as prev_year,
          CASE 
            WHEN LAG(value_std, 12) OVER (ORDER BY period_end) > 0
            THEN ((value_std - LAG(value_std, 12) OVER (ORDER BY 
  period_end)) / LAG(value_std, 12) OVER (ORDER BY period_end)) * 100
            ELSE NULL 
          END as yoy_rate
        FROM monthly_data
      )
      SELECT period_end, yoy_rate as value_std
      FROM with_yoy
      WHERE yoy_rate IS NOT NULL
        AND period_end >= current_date - interval '${months} months'
      ORDER BY period_end ASC
      LIMIT 50
    `);
  }

  Quick Fix 3: Ensure Cache Works

  File: /server/controllers/EconSparklineController.ts

  Make sure caching is enabled (around line 120):

  // Cache for 5 minutes instead of 30
  cache.set(cacheKey, response, 300000); // 5 minutes = 300,000ms

  Quick Fix 4: Add Error Handling

  File: /server/controllers/EconSparklineController.ts

  Wrap the query in better error handling:

  try {
    // ... query logic

    if (!queryResult.rows || queryResult.rows.length === 0) {
      return res.json({
        success: true,
        data: [],
        meta: {
          seriesId,
          transform: finalTransform,
          months: parseInt(months as string),
          points: 0
        },
        warning: 'no_data_available'
      });
    }

    // ... rest of processing

  } catch (error) {
    console.error(`Sparkline error for ${seriesId}:`, error);

    // Return empty data instead of error
    return res.json({
      success: true,
      data: [],
      meta: {
        seriesId,
        transform: finalTransform,
        months: parseInt(months as string),
        points: 0
      },
      error: 'query_failed'
    });
  }

‚è∫ Update Todos
  ‚éø ¬†‚òí Fix immediate sparkline loading issue              
     ‚òí Restore individual sparkline endpoint functionality
     ‚òí Optimize existing sparkline queries
     ‚òí Remove debug code causing cache issues

‚è∫ Alternative Quick Test

  If the above doesn't work immediately, try this temporary fallback in the
   sparkline controller:

  File: /server/controllers/EconSparklineController.ts

  // TEMPORARY: Return sample data to test frontend
  return res.json({
    success: true,
    data: [
      { t: Date.now() - 86400000 * 30, date: '2024-07-01', value: 2.5 },
      { t: Date.now() - 86400000 * 20, date: '2024-07-11', value: 2.7 },
      { t: Date.now() - 86400000 * 10, date: '2024-07-21', value: 2.9 },
      { t: Date.now(), date: '2024-07-31', value: 2.7 }
    ],
    meta: { seriesId, points: 4 },
    cached: false,
    test: true
  });

  This will show if the frontend is working and just the query is failing.

  Priority Actions

  1. First: Remove the debug code (cache.delete and console.log statements)
  2. Second: Restart your server
  3. Third: Check if sparklines appear
  4. Fourth: If still broken, add the temporary sample data

  The main issue is likely the cache.delete(cacheKey) line that's
  preventing any caching and possibly causing query failures.