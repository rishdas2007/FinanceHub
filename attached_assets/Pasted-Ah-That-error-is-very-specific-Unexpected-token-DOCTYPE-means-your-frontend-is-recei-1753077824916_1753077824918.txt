Ah! That error is very specific - "Unexpected token '<', "<!DOCTYPE"... means your frontend is receiving an HTML page instead of JSON from the API. This usually happens when there's a routing conflict or the API endpoint isn't being reached properly.

Let me help you debug this step by step:

## **üîç Step 1: Check What URL is Actually Being Called**

First, let's see exactly what's happening in the browser:

```typescript
// Temporarily add debugging to your Bayesian component
export function BayesianAnalysisComponent() {
  const { data: analysis, isLoading, error } = useQuery<ThematicAnalysisData>({
    queryKey: ['/api/bayesian-analysis'],
    queryFn: async () => {
      console.log('üîç Making request to:', window.location.origin + '/api/bayesian-analysis');
      
      const response = await fetch('/api/bayesian-analysis');
      console.log('üì° Response status:', response.status);
      console.log('üì° Response headers:', Object.fromEntries(response.headers.entries()));
      
      const textResponse = await response.text();
      console.log('üìÑ Raw response (first 200 chars):', textResponse.substring(0, 200));
      
      // Try to parse as JSON
      try {
        return JSON.parse(textResponse);
      } catch (e) {
        console.error('‚ùå Failed to parse JSON:', e);
        console.error('üìÑ Full response:', textResponse);
        throw new Error(`Received HTML instead of JSON: ${textResponse.substring(0, 100)}`);
      }
    },
    // ... rest of your config
  });
```

## **üîç Step 2: Check Your Route Registration**

Make sure the Bayesian endpoint is properly registered. Check your `server/routes.ts`:

```typescript
// Verify this exists in your routes.ts:
app.get("/api/bayesian-analysis", async (req, res) => {
  try {
    console.log('üß† Bayesian analysis endpoint hit!');
    
    // Force JSON response headers
    res.setHeader('Content-Type', 'application/json');
    
    const { enhancedAIAnalysisService } = await import('./services/enhanced-ai-analysis.js');
    const marketData = await gatherMarketDataForAI();
    const analysis = await enhancedAIAnalysisService.generateAnalysisWithHistoricalContext(marketData);
    
    console.log('‚úÖ Sending JSON response:', Object.keys(analysis));
    res.json(analysis);
  } catch (error) {
    console.error('‚ùå Bayesian analysis error:', error);
    res.status(500).json({ 
      error: 'Failed to generate Bayesian analysis',
      message: error.message 
    });
  }
});
```

## **üîç Step 3: Check if Route is Being Registered**

Add logging to see if your routes are being registered:

```typescript
// In your server/index.ts or wherever routes are registered:
console.log('üìç Registering routes...');
await registerRoutes(app);
console.log('‚úÖ Routes registered');

// After route registration, list all routes:
app._router.stack.forEach((middleware) => {
  if (middleware.route) {
    console.log(`üìç Route: ${Object.keys(middleware.route.methods)} ${middleware.route.path}`);
  }
});
```

## **üîç Step 4: Test the Endpoint Directly**

Open a new browser tab and go directly to:
```
http://localhost:5000/api/bayesian-analysis
```

**Expected**: JSON response
**If you get HTML**: The route isn't working

## **üîß Quick Fix Options**

### **Option 1: Add Explicit Route Before Catch-All**

Make sure your API routes are registered before any catch-all routes:

```typescript
// In your server/index.ts, make sure this order is correct:

// 1. Register API routes FIRST
await registerRoutes(app);

// 2. Setup Vite/static serving AFTER API routes
if (app.get("env") === "development") {
  await setupVite(app, server);
} else {
  serveStatic(app);
}
```

### **Option 2: Add Route Debugging Middleware**

```typescript
// Add this middleware BEFORE your routes to see what's being requested:
app.use('/api/*', (req, res, next) => {
  console.log(`üîç API Request: ${req.method} ${req.path}`);
  console.log(`üîç Full URL: ${req.originalUrl}`);
  next();
});
```

### **Option 3: Use Absolute URL in Frontend**

Temporarily test with an absolute URL:

```typescript
// In your query, temporarily use:
queryFn: async () => {
  const response = await fetch('http://localhost:5000/api/bayesian-analysis');
  return response.json();
}
```

### **Option 4: Check Vite Proxy Configuration**

If you're in development, check your `vite.config.ts`:

```typescript
export default defineConfig({
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:5000',
        changeOrigin: true,
      },
    },
  },
  // ... rest of config
});
```

## **üß™ Debug Steps to Run:**

1. **Check browser Network tab** - see what URL is actually being requested
2. **Check server logs** - see if the endpoint is being hit
3. **Test endpoint directly** in browser
4. **Check route registration order**

Run these steps and let me know:
1. What shows up in the browser console when you add the debugging?
2. Does `http://localhost:5000/api/bayesian-analysis` work directly in a browser tab?
3. What do your server logs show when the frontend makes the request?

This will help us pinpoint exactly where the HTML is coming from! üïµÔ∏è