Phase 4: Frontend Enhancements & Testing (Week 4)
4.1 Enhanced Frontend Display
File: client/src/components/AIAnalysis.tsx (complete rewrite)
typescriptimport React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { TrendingUp, TrendingDown, AlertTriangle, Clock, Target, Eye } from 'lucide-react';

interface ThematicAnalysisData {
  bottomLine: string;
  dominantTheme: string;
  setup: string;
  evidence: string;
  implications: string;
  catalysts: string;
  contrarianView: string;
  confidence: number;
  timestamp: string;
  patternAnalysis?: {
    totalMatches: number;
    averageOutcomes: {
      oneMonth: number;
    };
    patternReliability: number;
    historicalContext: string;
  };
}

export function AIAnalysis() {
  const [activeTab, setActiveTab] = useState('analysis');
  
  const { data: analysis, isLoading, error } = useQuery<{
    analysis: ThematicAnalysisData;
    success: boolean;
  }>({
    queryKey: ['/api/ai-analysis'],
    refetchInterval: 5 * 60 * 1000, // 5 minutes
    refetchOnMount: true,
    staleTime: 0
  });

  if (isLoading) {
    return (
      <Card className="p-6">
        <div className="animate-pulse space-y-4">
          <div className="h-4 bg-gray-600 rounded w-3/4"></div>
          <div className="h-4 bg-gray-600 rounded w-1/2"></div>
          <div className="h-20 bg-gray-600 rounded"></div>
        </div>
      </Card>
    );
  }

  if (error || !analysis?.success) {
    return (
      <Card className="p-6 border-red-500/30 bg-red-900/10">
        <div className="flex items-center gap-2 text-red-400">
          <AlertTriangle size={20} />
          <span>AI Analysis temporarily unavailable</span>
        </div>
      </Card>
    );
  }

  const analysisData = analysis.analysis;
  const confidenceColor = getConfidenceColor(analysisData.confidence);
  const confidenceLabel = getConfidenceLabel(analysisData.confidence);

  return (
    <Card className="p-6">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-xl font-bold flex items-center gap-2">
          🤖 AI Market Commentary
          <Badge variant="outline" className={`${confidenceColor} text-xs`}>
            {confidenceLabel}
          </Badge>
        </h2>
        <div className="text-xs text-gray-400 flex items-center gap-1">
          <Clock size={12} />
          {new Date(analysisData.timestamp).toLocaleTimeString()}
        </div>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-3 mb-6">
          <TabsTrigger value="analysis" className="flex items-center gap-1">
            <TrendingUp size={14} />
            Analysis
          </TabsTrigger>
          <TabsTrigger value="patterns" className="flex items-center gap-1">
            <Target size={14} />
            Patterns
          </TabsTrigger>
          <TabsTrigger value="contrarian" className="flex items-center gap-1">
            <Eye size={14} />
            Contrarian
          </TabsTrigger>
        </TabsList>

        <TabsContent value="analysis" className="space-y-6">
          {/* Bottom Line - Hero Section */}
          <div className="bg-gradient-to-r from-blue-900/30 to-purple-900/30 border border-blue-500/30 rounded-lg p-4">
            <h3 className="text-sm font-semibold text-blue-400 mb-2 flex items-center gap-2">
              <TrendingUp size={16} />
              MARKET THESIS
            </h3>
            <p className="text-lg font-medium text-white leading-relaxed">
              {analysisData.bottomLine}
            </p>
            <div className="flex items-center justify-between mt-3 pt-3 border-t border-blue-500/20">
              <ThemeBadge theme={analysisData.dominantTheme} />
              <ConfidenceIndicator confidence={analysisData.confidence} />
            </div>
          </div>

          {/* Narrative Sections */}
          <div className="grid gap-4">
            <AnalysisSection 
              icon={<TrendingUp size={16} />}
              title="MARKET SETUP" 
              content={analysisData.setup}
              className="border-l-2 border-green-500"
            />
            <AnalysisSection 
              icon={<Target size={16} />}
              title="EVIDENCE" 
              content={analysisData.evidence}
              className="border-l-2 border-blue-500"
            />
            <AnalysisSection 
              icon={<TrendingUp size={16} />}
              title="IMPLICATIONS" 
              content={analysisData.implications}
              className="border-l-2 border-purple-500"
            />
            <AnalysisSection 
              icon={<AlertTriangle size={16} />}
              title="KEY CATALYSTS" 
              content={analysisData.catalysts}
              className="border-l-2 border-yellow-500"
            />
          </div>
        </TabsContent>

        <TabsContent value="patterns" className="space-y-4">
          <PatternAnalysisDisplay pattern={analysisData.patternAnalysis} />
        </TabsContent>

        <TabsContent value="contrarian" className="space-y-4">
          <div className="bg-red-900/20 border border-red-500/30 rounded-lg p-4">
            <h3 className="text-sm font-semibold text-red-400 mb-3 flex items-center gap-2">
              <Eye size={16} />
              ALTERNATIVE PERSPECTIVE
            </h3>
            <p className="text-gray-100 leading-relaxed">{analysisData.contrarianView}</p>
          </div>
        </TabsContent>
      </Tabs>
    </Card>
  );
}

function ThemeBadge({ theme }: { theme: string }) {
  const themeColors = {
    'Risk-on': 'bg-green-900/30 text-green-400 border-green-500/30',
    'Risk-off': 'bg-red-900/30 text-red-400 border-red-500/30',
    'Rotation': 'bg-purple-900/30 text-purple-400 border-purple-500/30',
    'Momentum': 'bg-blue-900/30 text-blue-400 border-blue-500/30',
    'Defensive': 'bg-yellow-900/30 text-yellow-400 border-yellow-500/30'
  };
  
  const colorClass = Object.entries(themeColors).find(([key]) => 
    theme.toLowerCase().includes(key.toLowerCase())
  )?.[1] || 'bg-gray-900/30 text-gray-400 border-gray-500/30';
  
  return (
    <Badge variant="outline" className={`${colorClass} text-xs px-2 py-1`}>
      {theme}
    </Badge>
  );
}

function ConfidenceIndicator({ confidence }: { confidence: number }) {
  const percentage = Math.round(confidence * 100);
  const color = getConfidenceColor(confidence);
  
  return (
    <div className="flex items-center gap-2">
      <div className="w-16 bg-gray-700 rounded-full h-2">
        <div 
          className={`h-2 rounded-full ${color}`}
          style={{ width: `${percentage}%` }}
        />
      </div>
      <span className="text-xs text-gray-400">{percentage}%</span>
    </div>
  );
}

function AnalysisSection({ 
  icon, 
  title, 
  content, 
  className = '' 
}: { 
  icon: React.ReactNode;
  title: string; 
  content?: string; 
  className?: string;
}) {
  return (
    <div className={`pl-4 ${className}`}>
      <h4 className="text-sm font-semibold text-gray-300 mb-2 flex items-center gap-2">
        {icon}
        {title}
      </h4>
      <p className="text-gray-100 text-sm leading-relaxed">{content}</p>
    </div>
  );
}

function PatternAnalysisDisplay({ pattern }: { pattern?: any }) {
  if (!pattern) {
    return (
      <div className="text-center py-8 text-gray-400">
        <Target size={48} className="mx-auto mb-4 opacity-50" />
        <p>Pattern analysis not available</p>
      </div>
    );
  }
  
  return (
    <div className="space-y-4">
      <div className="grid grid-cols-2 gap-4">
        <MetricCard
          title="Historical Matches"
          value={pattern.totalMatches}
          subtitle="similar periods found"
        />
        <MetricCard
          title="Average Outcome"
          value={`${pattern.averageOutcomes.oneMonth > 0 ? '+' : ''}${pattern.averageOutcomes.oneMonth.toFixed(1)}%`}
          subtitle="1-month return"
          className={pattern.averageOutcomes.oneMonth > 0 ? 'text-green-400' : 'text-red-400'}
        />
      </div>
      
      <div className="bg-gray-800/50 rounded-lg p-4">
        <h4 className="text-sm font-semibold text-gray-300 mb-2">Historical Context</h4>
        <p className="text-gray-100 text-sm leading-relaxed">{pattern.historicalContext}</p>
      </div>
    </div>
  );
}

function MetricCard({ 
  title, 
  value, 
  subtitle, 
  className = '' 
}: { 
  title: string; 
  value: string | number; 
  subtitle: string; 
  className?: string;
}) {
  return (
    <div className="bg-gray-800/30 rounded-lg p-3">
      <div className="text-xs text-gray-400 mb-1">{title}</div>
      <div className={`text-lg font-semibold ${className}`}>{value}</div>
      <div className="text-xs text-gray-500">{subtitle}</div>
    </div>
  );
}

function getConfidenceColor(confidence: number): string {
  if (confidence >= 0.8) return 'bg-green-500 text-green-100 border-green-400';
  if (confidence >= 0.6) return 'bg-yellow-500 text-yellow-900 border-yellow-400';
  return 'bg-red-500 text-red-100 border-red-400';
}

function getConfidenceLabel(confidence: number): string {
  if (confidence >= 0.8) return 'High Confidence';
  if (confidence >= 0.6) return 'Moderate Confidence';
  return 'Low Confidence';
}
4.2 Scheduled Data Population
File: server/services/data-population.ts
typescriptimport { HistoricalContextService } from './historical-context.js';
import cron from 'node-cron';

export class DataPopulationService {
  private historicalContext: HistoricalContextService;
  
  constructor() {
    this.historicalContext = new HistoricalContextService();
  }

  startScheduledJobs() {
    console.log('📅 Starting scheduled data population jobs...');
    
    // Calculate percentiles daily at 2 AM
    cron.schedule('0 2 * * *', async () => {
      console.log('🔄 Running daily percentile calculations...');
      try {
        await this.historicalContext.calculateAndStorePercentiles();
        console.log('✅ Percentile calculations completed');
      } catch (error) {
        console.error('❌ Error in percentile calculations:', error);
      }
    });
    
    // Populate historical context weekly
    cron.schedule('0 3 * * 0', async () => {
      console.log('🔄 Running weekly historical context population...');
      try {
        await this.populateHistoricalContext();
        console.log('✅ Historical context population completed');
      } catch (error) {
        console.error('❌ Error in historical context population:', error);
      }
    });
  }

  private async populateHistoricalContext() {
    // Implementation for populating historical context table
    // This would analyze past market conditions and subsequent outcomes
    console.log('Populating historical context data...');
  }
}

// Add to your main server file
import { DataPopulationService } from './services/data-population.js';

const dataPopulation = new DataPopulationService();
dataPopulation.startScheduledJobs();