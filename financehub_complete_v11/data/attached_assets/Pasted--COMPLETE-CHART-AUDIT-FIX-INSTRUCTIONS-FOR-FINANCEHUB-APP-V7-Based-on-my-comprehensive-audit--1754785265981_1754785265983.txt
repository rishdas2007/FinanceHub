üìä COMPLETE CHART AUDIT & FIX INSTRUCTIONS FOR FINANCEHUB_APP_V7

  Based on my comprehensive audit, I've identified several critical
  issues with the charts. Here are the systematic fixes your analyst
  needs to implement:

  üö® IDENTIFIED ISSUES

  Issue 1: X-Axis Date Repetition Problem

  - Symptom: All dates showing as "8/9/2025" instead of historical
  progression
  - Root Cause: Date formatting logic in chart components not properly
  handling timestamp data

  Issue 2: Economic Indicators Not Loading

  - Symptom: Economic indicator charts showing no data
  - Root Cause: API endpoint mismatch and data structure inconsistencies

  Issue 3: Sparkline Data Processing

  - Symptom: Sparklines may show incorrect trend data
  - Root Cause: Service returning sample data instead of real historical
  data

  ---
  üîß SYSTEMATIC FIXES REQUIRED

  FIX 1: Stock History Date Formatting

  File: /client/src/components/price-chart.tsxLocation: Lines 80-90
  (chart data processing)

  PROBLEM: The date formatting logic is not properly handling the
  timestamp field.

  CURRENT CODE (Approximate):
  const chartData: ChartData[] = (stockHistory || []).map((item, index) 
  => {
    const dateObj = new Date(item.timestamp);
    return {
      price: parseFloat(item.price),
      rsi: calculatedRSI[index] || 65,
      date: item.timestamp,
      timestamp: item.timestamp,
      formattedDate: dateObj.toLocaleDateString(),
    };
  });

  FIX NEEDED:
  const chartData: ChartData[] = (stockHistory || []).map((item, index) 
  => {
    // CRITICAL FIX: Ensure timestamp is properly parsed as Date
    const dateObj = new Date(item.timestamp);

    // Validate the date is not invalid
    if (isNaN(dateObj.getTime())) {
      console.warn(`Invalid date for ${item.symbol}:`, item.timestamp);
      // Use current date as fallback
      const fallbackDate = new Date();
      return {
        price: parseFloat(item.price),
        rsi: calculatedRSI[index] || 65,
        date: fallbackDate.toISOString(),
        timestamp: fallbackDate.toISOString(),
        formattedDate: fallbackDate.toLocaleDateString('en-US', { month:
  'short', day: 'numeric' }),
      };
    }

    return {
      price: parseFloat(item.price),
      rsi: calculatedRSI[index] || 65,
      date: dateObj.toISOString(),
      timestamp: dateObj.toISOString(),
      // FIX: Use proper date formatting for x-axis
      formattedDate: dateObj.toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
        year: dateObj.getFullYear() !== new Date().getFullYear() ?
  '2-digit' : undefined
      }),
    };
  }).reverse(); // CRITICAL: Reverse to get chronological order for 
  charts

  ---
  FIX 2: Economic Chart Modal Data Structure

  File: /client/src/components/EconomicChartModal.tsxLocation: Lines
  47-56 (data fetching)

  PROBLEM: The API response structure doesn't match expected interface.

  CURRENT FETCH:
  const { data: chartData, isLoading, error } = useQuery({
    queryKey: ['economic-chart', metric.id, timeRange],
    queryFn: async () => {
      const months = timeRange === '3M' ? 3 : timeRange === '6M' ? 6 :
  timeRange === '12M' ? 12 : 24;
      const response = await fetch(`/api/economic-indicators/${metric.id}
  /history?months=${months}`);
      if (!response.ok) throw new Error('Failed to fetch chart data');
      return response.json();
    },
    enabled: isOpen && !!metric.id
  });

  FIX NEEDED:
  const { data: chartData, isLoading, error } = useQuery({
    queryKey: ['economic-chart', metric.id, timeRange],
    queryFn: async () => {
      const months = timeRange === '3M' ? 3 : timeRange === '6M' ? 6 :
  timeRange === '12M' ? 12 : 24;

      // FIX: Add better error handling and logging
      console.log(`üîç Fetching economic chart data for ${metric.id} 
  (${months}M)`);

      const response = await fetch(`/api/economic-indicators/${metric.id}
  /history?months=${months}`);
      if (!response.ok) {
        const errorText = await response.text();
        console.error(`Economic chart API error:`, errorText);
        throw new Error(`Failed to fetch chart data: 
  ${response.status}`);
      }

      const result = await response.json();
      console.log(`üìä Economic chart data received:`, result);

      // FIX: Handle both success/data format and direct data format
      if (result.success === false) {
        throw new Error(result.error || 'API returned error');
      }

      // Return consistent format
      return {
        data: result.data || result, // Handle both wrapped and direct 
  data
        metadata: result.metadata || { source: 'FRED', lastUpdate: new
  Date().toISOString() }
      };
    },
    enabled: isOpen && !!metric.id,
    retry: 2,
    staleTime: 5 * 60 * 1000 // 5 minutes
  });

  ---
  FIX 3: Economic Indicator API Route Response

  File: /server/routes.tsLocation: Lines 484-490 (economic indicators
  endpoint response)

  PROBLEM: Response format inconsistent with frontend expectations.

  CURRENT RESPONSE FORMAT:
  res.json({
    success: true,
    indicator: id,
    data: historicalData.data,
    metadata: {
      source: 'FRED',
      // ... other metadata
    }
  });

  FIX NEEDED - Add logging and ensure data format:
  // Add before res.json()
  console.log(`üìä Returning economic data for ${id}:`, {
    dataPoints: historicalData.data?.length || 0,
    sampleData: historicalData.data?.slice(0, 3) || []
  });

  // FIX: Ensure data is in correct format
  const responseData = {
    success: true,
    indicator: id,
    data: historicalData.data || [],
    metadata: {
      source: 'FRED',
      units: historicalData.units || '',
      frequency: historicalData.frequency || 'Monthly',
      lastUpdate: historicalData.lastUpdate || new Date().toISOString(),
      count: historicalData.data?.length || 0
    }
  };

  // Validate data format before sending
  if (!responseData.data || !Array.isArray(responseData.data)) {
    console.warn(`‚ö†Ô∏è Invalid data format for ${id}`);
    responseData.data = [];
  }

  res.json(responseData);

  ---
  FIX 4: Macroeconomic Service Date Processing

  File: /server/services/macroeconomic-indicators.tsLocation: Lines 56-63
   (data processing)

  PROBLEM: Date formatting and validation issues.

  CURRENT CODE:
  const historicalData = result.rows.map((row: any) => {
    const date = new Date(row.date);
    return {
      date: row.date,
      value: parseFloat(row.value),
      formattedDate: date.toLocaleDateString('en-US', { month: 'short',
  year: '2-digit' })
    };
  }).reverse();

  FIX NEEDED:
  const historicalData = result.rows.map((row: any) => {
    const date = new Date(row.date);

    // FIX: Validate date and handle parsing errors
    if (isNaN(date.getTime())) {
      console.warn(`Invalid date in economic data:`, row.date);
      return null;
    }

    const value = parseFloat(row.value);
    if (isNaN(value)) {
      console.warn(`Invalid value in economic data:`, row.value);
      return null;
    }

    return {
      date: date.toISOString(), // Standardize date format
      value: value,
      formattedDate: date.toLocaleDateString('en-US', {
        month: 'short',
        year: '2-digit',
        day: 'numeric' // Add day for better granularity
      })
    };
  }).filter(Boolean) // Remove invalid entries
  .reverse(); // Chronological order

  ---
  FIX 5: Add Chart Data Validation Middleware

  File: /server/routes.tsLocation: Add before economic indicators
  endpoint (line 467)

  NEW CODE TO ADD:
  // Helper function to validate and format chart data
  function validateChartData(data: any[], metricName: string) {
    if (!Array.isArray(data)) {
      console.warn(`Invalid data format for ${metricName}: not an 
  array`);
      return [];
    }

    return data.filter(item => {
      if (!item.date || !item.value || isNaN(parseFloat(item.value))) {
        console.warn(`Invalid data point for ${metricName}:`, item);
        return false;
      }
      return true;
    }).map(item => ({
      ...item,
      value: parseFloat(item.value),
      date: new Date(item.date).toISOString(),
      formattedDate: item.formattedDate || new
  Date(item.date).toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
        year: '2-digit'
      })
    }));
  }

  ---
  FIX 6: Frontend Error Handling Enhancement

  File: /client/src/components/EconomicChartModal.tsxLocation: Lines
  85-97 (error display)

  ENHANCE ERROR DISPLAY:
  if (error || !chartData?.data) {
    // FIX: Add more detailed error information
    console.error('Economic chart error:', error);
    console.log('Chart data received:', chartData);

    return (
      <div className="h-96 flex items-center justify-center 
  text-gray-400">
        <div className="text-center">
          <TrendingUp className="h-12 w-12 mx-auto mb-4 opacity-50" />
          <p>Unable to load chart data</p>
          <p className="text-sm text-gray-500 mt-1">
            {error?.message || 'No data available for this indicator'}
          </p>
          <p className="text-xs text-gray-600 mt-1">
            Metric ID: {metric.id} | Range: {timeRange}
          </p>
          <Button variant="outline" size="sm" onClick={() =>
  window.location.reload()} className="mt-2">
            Retry
          </Button>
        </div>
      </div>
    );
  }

  ---
  üîç DEBUGGING STEPS FOR YOUR ANALYST

  Step 1: Test Stock History API

  # Test the stock history endpoint directly
  curl http://localhost:5000/api/stocks/SPY/history?limit=30

  Step 2: Test Economic Indicators API

  # Test economic indicators endpoint
  curl http://localhost:5000/api/economic-indicators/unemployment_rate/hi
  story?months=12

  Step 3: Add Console Logging

  Add these console.log statements temporarily to debug:

  In EconomicChartModal.tsx (after line 99):
  console.log('üìä Chart Data Debug:', {
    hasData: !!chartData?.data,
    dataLength: chartData?.data?.length || 0,
    firstItem: chartData?.data?.[0],
    lastItem: chartData?.data?.[chartData.data.length - 1]
  });

  In price-chart.tsx (after data processing):
  console.log('üìà Stock Chart Debug:', {
    stockHistoryLength: stockHistory?.length || 0,
    chartDataLength: chartData?.length || 0,
    sampleDates: chartData?.slice(0, 3).map(d => d.formattedDate) || []
  });

  ---
  üéØ IMPLEMENTATION ORDER

  1. Fix 4 (Macroeconomic Service) - Foundation fix
  2. Fix 3 (API Route Response) - Ensures proper data flow
  3. Fix 5 (Validation Middleware) - Data integrity
  4. Fix 2 (Economic Chart Modal) - Frontend data handling
  5. Fix 1 (Stock History Date Formatting) - Chart display
  6. Fix 6 (Error Handling) - User experience

  ‚úÖ EXPECTED RESULTS

  After implementing these fixes:
  - X-axis dates will show proper historical progression (e.g., "Aug 1",
  "Aug 2", "Aug 3")
  - Economic indicator charts will display real data from the database
  - Error handling will provide clear feedback when data is unavailable
  - Console logging will help diagnose any remaining issues
