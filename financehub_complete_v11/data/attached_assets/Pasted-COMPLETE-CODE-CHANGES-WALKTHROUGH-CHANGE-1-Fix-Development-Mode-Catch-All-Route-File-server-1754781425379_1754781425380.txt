COMPLETE CODE CHANGES WALKTHROUGH

  CHANGE 1: Fix Development Mode Catch-All Route

  File: /server/vite.tsLocation: Lines 44-72 (the app.use("*", ...)
  handler)

  BEFORE:
  app.use("*", async (req, res, next) => {
    const url = req.originalUrl;

    try {
      const clientTemplate = path.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html",
      );

      // always reload the index.html file from disk incase it changes
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`,
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e as Error);
      next(e);
    }
  });

  AFTER:
  app.use("*", async (req, res, next) => {
    const url = req.originalUrl;

    // CRITICAL FIX: Don't serve HTML for API routes
    if (url.startsWith('/api/') || url.startsWith('/health/')) {
      return next();
    }

    try {
      const clientTemplate = path.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html",
      );

      // always reload the index.html file from disk incase it changes
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`,
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e as Error);
      next(e);
    }
  });

  What Changed: Added 3 lines (47-50) to check if the URL starts with
  /api/ or /health/ and skip HTML serving for those routes.

  ---
  CHANGE 2: Fix Production Mode Catch-All Route

  File: /server/vite.tsLocation: Lines 82-84 (the production static file
  handler)

  BEFORE:
  // fall through to index.html if the file doesn't exist
  app.use("*", (_req, res) => {
    res.sendFile(path.resolve(distPath, "index.html"));
  });

  AFTER:
  // fall through to index.html if the file doesn't exist (but not for 
  API routes)
  app.use("*", (req, res, next) => {
    // CRITICAL FIX: Don't serve HTML for API routes in production
    if (req.originalUrl.startsWith('/api/') ||
  req.originalUrl.startsWith('/health/')) {
      return next();
    }
    res.sendFile(path.resolve(distPath, "index.html"));
  });

  What Changed:
  - Changed function parameters from (_req, res) to (req, res, next)
  - Added API route check before serving HTML
  - Added return next() to pass API routes to other handlers

  ---
  CHANGE 3: Add JSON Response Enforcement Middleware

  File: /server/index.tsLocation: After line 65 (after the existing API
  middleware)

  BEFORE:
  // Apply security only to API routes to avoid frontend interference
  app.use('/api', securityHeaders);
  app.use('/api', compression());
  app.use('/api', cors(corsOptions));
  app.use('/api', apiRateLimit);

  // Optional Enhancements - Metrics Collection
  app.use('/api', metricsMiddleware());

  AFTER:
  // Apply security only to API routes to avoid frontend interference
  app.use('/api', securityHeaders);
  app.use('/api', compression());
  app.use('/api', cors(corsOptions));
  app.use('/api', apiRateLimit);

  // CRITICAL FIX: Ensure all API responses are JSON by default
  app.use('/api', (req: Request, res: Response, next: NextFunction) => {
    // Set default Content-Type for API routes
    if (!res.getHeader('Content-Type')) {
      res.setHeader('Content-Type', 'application/json');
    }

    // Override res.send to always ensure JSON response for API routes
    const originalSend = res.send;
    res.send = function(data: any) {
      if (typeof data === 'string' && !res.getHeader('Content-Type')?.toS
  tring().includes('application/json')) {
        try {
          JSON.parse(data);
          res.setHeader('Content-Type', 'application/json');
        } catch (e) {
          // If it's not valid JSON, treat it as an error response
          return originalSend.call(this, JSON.stringify({ error: data
  }));
        }
      }
      return originalSend.call(this, data);
    };

    next();
  });

  // Optional Enhancements - Metrics Collection
  app.use('/api', metricsMiddleware());

  What Changed: Added entire middleware block (lines 67-90) that:
  - Sets default JSON Content-Type for all API routes
  - Overrides res.send to ensure JSON responses
  - Wraps non-JSON strings in error format

  ---
  CHANGE 4: Add Proper API 404 Handler

  File: /server/index.tsLocation: Before line 158 (before the existing
  error handler)

  BEFORE:
      // Basic error handler (keep original functionality)
      app.use((err: any, _req: Request, res: Response, _next: 
  NextFunction) => {
        const status = err.status || err.statusCode || 500;
        const message = err.message || "Internal Server Error";
        log(`‚ùå Application error: ${message} (Status: ${status})`);
        res.status(status).json({ message });
      });

  AFTER:
      // API 404 handler - must come before catch-all HTML routes
      app.use('/api/*', (req: Request, res: Response) => {
        log(`‚ùå API endpoint not found: ${req.method} 
  ${req.originalUrl}`);
        res.status(404).json({
          error: 'API endpoint not found',
          path: req.originalUrl,
          method: req.method,
          timestamp: new Date().toISOString()
        });
      });

      // Basic error handler (keep original functionality)
      app.use((err: any, _req: Request, res: Response, _next: 
  NextFunction) => {
        const status = err.status || err.statusCode || 500;
        const message = err.message || "Internal Server Error";
        log(`‚ùå Application error: ${message} (Status: ${status})`);
        res.status(status).json({ message });
      });

  What Changed: Added API 404 handler (lines 158-166) that returns proper
   JSON 404 responses for unmatched API routes.

  ---
  üîß STEP-BY-STEP REPLICATION INSTRUCTIONS

  Step 1: Edit vite.ts Development Handler

  1. Open /server/vite.ts
  2. Find line ~44: app.use("*", async (req, res, next) => {
  3. After line 45 (const url = req.originalUrl;), add these 4 lines:

  // CRITICAL FIX: Don't serve HTML for API routes
  if (url.startsWith('/api/') || url.startsWith('/health/')) {
    return next();
  }

  Step 2: Edit vite.ts Production Handler

  1. In the same file, find line ~82: app.use("*", (_req, res) => {
  2. Replace the entire function with:
  app.use("*", (req, res, next) => {
    // CRITICAL FIX: Don't serve HTML for API routes in production
    if (req.originalUrl.startsWith('/api/') ||
  req.originalUrl.startsWith('/health/')) {
      return next();
    }
    res.sendFile(path.resolve(distPath, "index.html"));
  });

  Step 3: Add JSON Middleware to index.ts

  1. Open /server/index.ts
  2. Find line ~65: app.use('/api', apiRateLimit);
  3. After that line, add this entire block:

  // CRITICAL FIX: Ensure all API responses are JSON by default
  app.use('/api', (req: Request, res: Response, next: NextFunction) => {
    // Set default Content-Type for API routes
    if (!res.getHeader('Content-Type')) {
      res.setHeader('Content-Type', 'application/json');
    }

    // Override res.send to always ensure JSON response for API routes
    const originalSend = res.send;
    res.send = function(data: any) {
      if (typeof data === 'string' && !res.getHeader('Content-Type')?.toS
  tring().includes('application/json')) {
        try {
          JSON.parse(data);
          res.setHeader('Content-Type', 'application/json');
        } catch (e) {
          // If it's not valid JSON, treat it as an error response
          return originalSend.call(this, JSON.stringify({ error: data
  }));
        }
      }
      return originalSend.call(this, data);
    };

    next();
  });

  Step 4: Add API 404 Handler to index.ts

  1. In the same file, find the line with: serveStatic(app); (around line
   154)
  2. After the closing } of that if/else block, add:

  // API 404 handler - must come before catch-all HTML routes
  app.use('/api/*', (req: Request, res: Response) => {
    log(`‚ùå API endpoint not found: ${req.method} ${req.originalUrl}`);
    res.status(404).json({
      error: 'API endpoint not found',
      path: req.originalUrl,
      method: req.method,
      timestamp: new Date().toISOString()
    });
  });

  Step 5: Verify Changes

  After making these changes:
  1. Restart the development server
  2. Test any API endpoint (e.g., /api/stocks/SPY)
  3. Check browser Network tab - Content-Type should be application/json
  4. Verify 404s return JSON - Try /api/nonexistent and confirm JSON
  response

  üéØ SUMMARY

  - 4 total changes across 2 files
  - No breaking changes to existing functionality
  - Universal fix that handles both development and production modes
  - Backward compatible with all existing API routes

  Your analyst can copy these exact code blocks in the specified
  locations to replicate the fix completely.

